
[NoDelete, Prefix="ImGuiWrapper::"]
interface ImGuiInternal {
    // Note: method overloading don't work with emscripten so we use _2, _3 and so on

    static long                    ImHashData_1([Const] DOMString data, long data_size, optional long seed);
    static long                    ImHashStr_1([Const] DOMString data, optional long data_size, optional long seed);

    static ImGuiWindow             GetCurrentWindow();
    static ImGuiWindow             FindWindowByID(long id);
    static ImGuiWindow             FindWindowByName([Const] DOMString name);

    // Windows: Display Order and Focus Order
    static void                    FocusWindow(ImGuiWindow window, optional ImGuiFocusRequestFlags ImGuiFocusRequestFlags);

    // Basic Helpers for widget code
    static void                    ItemSize([Const, Ref] ImVec2 size, optional float text_baseline_y);
    static void                    ItemSize_2([Const, Ref] ImRect bb, optional float text_baseline_y);
    static boolean                 ItemAdd([Const, Ref] ImRect bb, long id, [Const] optional ImRect nav_bb, optional ImGuiItemFlags ImGuiItemFlags);
    static boolean                 ItemHoverable([Const, Ref] ImRect bb, long id, ImGuiItemFlags ImGuiItemFlags);
    static boolean                 IsWindowContentHoverable(ImGuiWindow window, optional ImGuiHoveredFlags ImGuiHoveredFlags);
    static boolean                 IsClippedEx([Const, Ref] ImRect bb, long id);
    static void                    SetLastItemData(long item_id, ImGuiItemFlags ImGuiItemFlags, ImGuiItemStatusFlags ImGuiItemStatusFlags, [Const, Ref] ImRect item_rect);
    [Value] static ImVec2          CalcItemSize([Ref] ImVec2 size, float default_w, float default_h);
    static float                   CalcWrapWidthForPos([Const, Ref] ImVec2 pos, float wrap_pos_x);
    static void                    PushMultiItemsWidths(long components, float width_full);
    static boolean                 IsItemToggledSelection();
    static void                    ShrinkWidths(ImGuiShrinkWidthItem items, long count, float width_excess);

    static void                    DockBuilderDockWindow([Const] DOMString window_name, long node_id);
    static ImGuiDockNode           DockBuilderGetNode(long node_id);
    static ImGuiDockNode           DockBuilderGetCentralNode(long node_id);
    static long                    DockBuilderAddNode(optional long node_id, optional ImGuiDockNodeFlags ImGuiDockNodeFlags);
    static void                    DockBuilderRemoveNode(long node_id);
    static void                    DockBuilderRemoveNodeDockedWindows(long node_id, optional boolean clear_settings_refs);
    static void                    DockBuilderRemoveNodeChildNodes(long node_id);
    static void                    DockBuilderSetNodePos(long node_id, [Ref] ImVec2 pos);
    static void                    DockBuilderSetNodeSize(long node_id, [Ref] ImVec2 size);
    static long                    DockBuilderSplitNode(long node_id, ImGuiDir split_dir, float size_ratio_for_node_at_dir, long[] out_id_at_dir, long[] out_id_at_opposite_dir);
//    static void                    DockBuilderCopyDockSpace(long src_dockspace_id, long dst_dockspace_id, ImVector<const char*>* in_window_remap_pairs);
//    static void                    DockBuilderCopyNode(long src_node_id, long dst_node_id, ImVector<long>* out_node_remap_pairs);
    static void                    DockBuilderCopyWindowSettings([Const] DOMString src_name, [Const] DOMString dst_name);
    static void                    DockBuilderFinish(long node_id);

    static boolean                 BeginTableEx([Const] DOMString str_id, long id, long column, optional ImGuiTableFlags ImGuiTableFlags, [Const, Ref] optional ImVec2 outer_size, optional float inner_width);

    static ImGuiTabBar             GetCurrentTabBar();
    static ImGuiTabItem            TabBarFindTabByID(ImGuiTabBar tab_bar, long tab_id);
    static ImGuiTabItem            TabBarFindTabByOrder(ImGuiTabBar tab_bar, long order);
    static void                    TabBarCloseTab(ImGuiTabBar tab_bar, ImGuiTabItem tab);
    static void                    TabBarQueueFocus(ImGuiTabBar tab_bar, ImGuiTabItem tab);
    static void                    TabBarQueueReorder(ImGuiTabBar tab_bar, ImGuiTabItem tab, long offset);

    // Basic Accessors
    static long                    GetActiveID();
    static long                    GetFocusID();
    static void                    SetActiveID(long id, ImGuiWindow window);
    static void                    SetFocusID(long id, ImGuiWindow window);
    static void                    ClearActiveID();
    static long                    GetHoveredID();
    static void                    SetHoveredID(long id);
    static void                    KeepAliveID(long id);

    // Drag and Drop
    static boolean                        IsDragDropActive();
    static boolean                        BeginDragDropTargetCustom([Const, Ref] ImRect bb, long id);
    static void                           ClearDragDrop();
    static boolean                        IsDragDropPayloadBeingAccepted();
    static void                           RenderDragDropTargetRect([Const, Ref] ImRect bb, [Const, Ref] ImRect item_clip_rect);

    // Render helpers (those functions don't access any ImGui state!)
    static void                    RenderArrow(ImDrawList draw_list, [Ref] ImVec2 pos, long col, ImGuiDir dir, optional float scale);
    static void                    RenderBullet(ImDrawList draw_list, [Ref] ImVec2 pos, long col);
    static void                    RenderCheckMark(ImDrawList draw_list, [Ref] ImVec2 pos, long col, float sz);
    static void                    RenderArrowPointingAt(ImDrawList draw_list, [Ref] ImVec2 pos, [Ref] ImVec2 half_sz, ImGuiDir direction, long col);
    static void                    RenderArrowDockMenu(ImDrawList draw_list, [Ref] ImVec2 p_min, float sz, long col);
    static void                    RenderRectFilledRangeH(ImDrawList draw_list, [Const, Ref] ImRect rect, long col, float x_start_norm, float x_end_norm, float rounding);
    static void                    RenderRectFilledWithHole(ImDrawList draw_list, [Const, Ref] ImRect outer, [Const, Ref] ImRect inner, long col, float rounding);
    static ImDrawFlags             CalcRoundingFlagsForRectInRect([Const, Ref] ImRect r_in, [Const, Ref] ImRect r_outer, float threshold);

    // Widgets
//    static void                    TextEx(const char* text, const char* text_end = NULL, ImGuiTextFlags flags = 0);
//    static boolean                 ButtonEx(const char* label, const ImVec2& size_arg = ImVec2(0, 0), ImGuiButtonFlags flags = 0);
    static boolean                 ArrowButtonEx([Const] DOMString str_id, ImGuiDir dir, [Ref] ImVec2 size_arg, optional ImGuiButtonFlags ImGuiButtonFlags);
//    static boolean                 ImageButtonEx(long id, ImTextureID texture_id, const ImVec2& image_size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& bg_col, const ImVec4& tint_col, ImGuiButtonFlags flags = 0);
//    static void                    SeparatorEx(ImGuiSeparatorFlags flags, float thickness = 1.0f);
//    static void                    SeparatorTextEx(long id, const char* label, const char* label_end, float extra_width);
//    static boolean                 CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value);
//    static boolean                 CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value);

    // Widgets low-level behaviors
    static boolean                 ButtonBehavior([Const, Ref] ImRect bb, long id, boolean[] out_hovered, boolean[] out_held, optional ImGuiButtonFlags ImGuiButtonFlags);
    static boolean                 DragBehavior(long id, ImGuiDataType ImGuiDataType, any p_v, float v_speed, [Const] any p_min, [Const] any p_max, [Const] DOMString format, ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderBehavior([Const, Ref] ImRect bb, long id, ImGuiDataType ImGuiDataType, any p_v, [Const] any p_min, [Const] any p_max, [Const] DOMString format, ImGuiSliderFlags ImGuiSliderFlags, ImRect out_grab_bb);
    static boolean                 SplitterBehavior([Const, Ref] ImRect bb, long id, ImGuiAxis axis, float[] size1, float[] size2, float min_size1, float min_size2, optional float hover_extend, optional float hover_visibility_delay, optional long bg_col);
    static boolean                 TreeNodeBehavior(long id, ImGuiTreeNodeFlags ImGuiTreeNodeFlags, [Const] DOMString label, [Const] optional DOMString label_end);
    static void                    TreePushOverrideID(long id);
    static void                    TreeNodeSetOpen(long id, boolean open);
    static boolean                 TreeNodeUpdateNextOpen(long id, ImGuiTreeNodeFlags ImGuiTreeNodeFlags);
    static void                    SetNextItemSelectionUserData(long selection_user_data);

    static long                    GetKeyOwner(ImGuiKey ImGuiKey);
    static void                    SetKeyOwner(ImGuiKey ImGuiKey, long owner_id, optional ImGuiInputFlags ImGuiInputFlags);
    static void                    SetItemKeyOwner(ImGuiKey ImGuiKey, optional ImGuiInputFlags ImGuiInputFlags);
    static boolean                 TestKeyOwner(ImGuiKey ImGuiKey, long owner_id);

    static void                    ScrollToItem(optional ImGuiScrollFlags flags);
    static void                    ScrollToRect(ImGuiWindow window, [Const, Ref] ImRect rect, optional ImGuiScrollFlags flags);
    [Value] static ImVec2          ScrollToRectEx(ImGuiWindow window, [Const, Ref] ImRect rect, optional ImGuiScrollFlags flags);
};

[NoDelete, Prefix="ImGuiWrapper::"]
interface ImGui {
    // Note: method overloading don't work with emscripten so we use _2, _3 and so on

    // Context creation and access
    static ImGuiContext            CreateContext(optional ImFontAtlas shared_font_atlas);
    static void                    DestroyContext(optional ImGuiContext ctx);
    static ImGuiContext            GetCurrentContext();
    static void                    SetCurrentContext(ImGuiContext ctx);

    // Main
    [Ref] static ImGuiIO           GetIO();
    [Ref] static ImGuiStyle        GetStyle();
    static void                    NewFrame();
    static void                    EndFrame();
    static void                    Render();
    static ImDrawData              GetDrawData();

    // Demo, Debug, Information
    static void                    ShowDemoWindow(optional boolean[] p_open);
    static void                    ShowMetricsWindow(optional boolean[] p_open);
    static void                    ShowDebugLogWindow(optional boolean[] p_open);
    static void                    ShowIDStackToolWindow(optional boolean[] p_open);
    static void                    ShowAboutWindow(optional boolean[] p_open);
    static void                    ShowStyleEditor(optional ImGuiStyle ref);
    static void                    ShowStyleSelector([Const] DOMString label);
    static void                    ShowFontSelector([Const] DOMString label);
    static void                    ShowUserGuide();
////    [Const] DOMString        GetVersion();

    // Styles
    static void                    StyleColorsDark(optional ImGuiStyle dst);
    static void                    StyleColorsLight(optional ImGuiStyle dst);
    static void                    StyleColorsClassic(optional ImGuiStyle dst);

    // Windows
    static boolean                 Begin([Const] DOMString name, optional boolean[] p_open, optional ImGuiWindowFlags ImGuiWindowFlags);
    static void                    End();

    // Child Windows
    static boolean                 BeginChild([Const] DOMString str_id, [Const,Ref] optional ImVec2 size, optional ImGuiChildFlags ImGuiChildFlags, optional ImGuiWindowFlags ImGuiWindowFlags);
    static boolean                 BeginChild_2(long id, [Const,Ref] optional ImVec2 size, optional ImGuiChildFlags ImGuiChildFlags, optional ImGuiWindowFlags ImGuiWindowFlags);
    static void                    EndChild();

    // Windows Utilities
    static boolean                 IsWindowAppearing();
    static boolean                 IsWindowCollapsed();
    static boolean                 IsWindowFocused(optional ImGuiFocusedFlags ImGuiFocusedFlags);
    static boolean                 IsWindowHovered(optional ImGuiFocusedFlags ImGuiFocusedFlags);
    static ImDrawList              GetWindowDrawList();
    static float                   GetWindowDpiScale();
    [Value] static ImVec2          GetWindowPos();
    [Value] static ImVec2          GetWindowSize();
    static float                   GetWindowWidth();
    static float                   GetWindowHeight();
    static ImGuiViewport           GetWindowViewport();

    // Window manipulation
    static void                    SetNextWindowPos([Const, Ref]ImVec2 pos, optional ImGuiCond ImGuiCond, [Const, Ref] optional ImVec2 pivot);
    static void                    SetNextWindowSize([Const, Ref]ImVec2 size, optional ImGuiCond ImGuiCond);
    static void                    SetNextWindowSizeConstraints([Const, Ref]ImVec2 size_min, [Const, Ref]ImVec2 size_max); //, optional CustomImGuiSizeCallback custom_callback, any custom_callback_data);
    static void                    SetNextWindowContentSize([Const, Ref]ImVec2 size);
    static void                    SetNextWindowCollapsed(boolean collapsed, optional ImGuiCond ImGuiCond);
    static void                    SetNextWindowFocus();
    static void                    SetNextWindowScroll([Const, Ref]ImVec2 scroll);
    static void                    SetNextWindowBgAlpha(float alpha);
    static void                    SetNextWindowViewport(long viewport_id);
    static void                    SetWindowPos([Const, Ref]ImVec2 pos, optional ImGuiCond ImGuiCond);
    static void                    SetWindowSize([Const, Ref]ImVec2 size, optional ImGuiCond ImGuiCond);
    static void                    SetWindowCollapsed(boolean collapsed, optional ImGuiCond ImGuiCond);
    static void                    SetWindowFocus();
    static void                    SetWindowFontScale(float scale);
    static void                    SetWindowPos_2([Const] DOMString name, [Const, Ref]ImVec2 pos, optional ImGuiCond ImGuiCond);
    static void                    SetWindowSize_2([Const] DOMString name, [Const, Ref]ImVec2 size, optional ImGuiCond ImGuiCond);
    static void                    SetWindowCollapsed_2([Const] DOMString name, boolean collapsed, optional ImGuiCond ImGuiCond);
    static void                    SetWindowFocus([Const] DOMString name);

    // Windows Scrolling
    static float                   GetScrollX();
    static float                   GetScrollY();
    static void                    SetScrollX(float scroll_x);
    static void                    SetScrollY(float scroll_y);
    static float                   GetScrollMaxX();
    static float                   GetScrollMaxY();
    static void                    SetScrollHereX(optional float center_x_ratio);
    static void                    SetScrollHereY(optional float center_y_ratio);
    static void                    SetScrollFromPosX(float local_x, optional float center_x_ratio);
    static void                    SetScrollFromPosY(float local_y, optional float center_y_ratio);

    // Parameters stacks (shared)
    static void                    PushFont(ImFont font);
    static void                    PopFont();
    static void                    PushStyleColor(ImGuiCol idx, unsigned long col);
    static void                    PushStyleColor_2(ImGuiCol idx, [Const, Ref] ImVec4 col);
    static void                    PopStyleColor(optional long count);
    static void                    PushStyleVar(ImGuiStyleVar idx, float val);
    static void                    PushStyleVar_2(ImGuiStyleVar idx, [Const, Ref]ImVec2 val);
    static void                    PopStyleVar(optional long count);

    // Parameters stacks (current window)
    static void                    PushItemWidth(float item_width);
    static void                    PopItemWidth();
    static void                    SetNextItemWidth(float item_width);
    static float                   CalcItemWidth();
    static void                    PushTextWrapPos(optional float wrap_local_pos_x);
    static void                    PopTextWrapPos();

    // Style read access
    static ImFont                  GetFont();
    static float                   GetFontSize();
    [Value] static ImVec2          GetFontTexUvWhitePixel();
    static unsigned long           GetColorU32Style(long idx, optional float alpha_mul);
    static unsigned long           GetColorU32_2([Const, Ref]ImVec4 col);
    static unsigned long           GetColorU32_3(unsigned long col);
    [Const, Ref] static ImVec4     GetStyleColorVec4(long idx);

    // Layout cursor positioning
    [Value] static ImVec2          GetCursorScreenPos();
    static void                    SetCursorScreenPos([Const, Ref] ImVec2 pos);
    [Value] static ImVec2          GetContentRegionAvail();
    [Value] static ImVec2          GetCursorPos();
    static float                   GetCursorPosX();
    static float                   GetCursorPosY();
    static void                    SetCursorPos([Const, Ref] ImVec2 local_pos);
    static void                    SetCursorPosX(float local_x);
    static void                    SetCursorPosY(float local_y);
    [Value] static ImVec2          GetCursorStartPos();

    // Other layout functions
    static void                    Separator();
    static void                    SameLine(optional float offset_from_start_x, optional float spacing);
    static void                    NewLine();
    static void                    Spacing();
    static void                    Dummy([Const, Ref]ImVec2 size);
    static void                    Indent(optional float indent_w);
    static void                    Unindent(optional float indent_w);
    static void                    BeginGroup();
    static void                    EndGroup();
    static void                    AlignTextToFramePadding();
    static float                   GetTextLineHeight();
    static float                   GetTextLineHeightWithSpacing();
    static float                   GetFrameHeight();
    static float                   GetFrameHeightWithSpacing();

    // ID stack/scopes
    static void                    PushID([Const] DOMString str_id);
    static void                    PushID([Const] DOMString str_id_begin, [Const] DOMString str_id_end);
    static void                    PushID_2(long int_id);
    static void                    PopID();
    static long                    GetID([Const] DOMString str_id);
    static long                    GetID_2([Const] DOMString str_id_begin, [Const] DOMString str_id_end);
    static long                    GetID_3([Const] any ptr_id);

    // Widgets: Text
    static void                    TextUnformatted([Const] DOMString text, [Const] optional DOMString text_end);
    static void                    Text([Const] DOMString fmt);
    static void                    TextColored([Const, Ref] ImVec4 col, [Const] DOMString fmt);
    static void                    TextDisabled([Const] DOMString fmt);
    static void                    TextWrapped([Const] DOMString fmt);
    static void                    LabelText([Const] DOMString label, [Const] DOMString fmt);
    static void                    BulletText([Const] DOMString fmt);
    static void                    SeparatorText([Const] DOMString label);

    // Widgets: Main
    static boolean                 Button([Const] DOMString label, [Const, Ref] optional ImVec2 size);
    static boolean                 SmallButton([Const] DOMString label);
    static boolean                 InvisibleButton([Const] DOMString str_id, [Const, Ref] ImVec2 size, optional ImGuiButtonFlags ImGuiButtonFlags);
    static boolean                 ArrowButton([Const] DOMString str_id, ImGuiDir dir);
    static boolean                 Checkbox([Const] DOMString label, boolean[] v);
    static boolean                 CheckboxFlags([Const] DOMString label, long[] flags, long flags_value);
    static boolean                 RadioButton([Const] DOMString label, boolean active);
    static boolean                 RadioButton_2([Const] DOMString label, long[] v, long v_button);
    static void                    ProgressBar(float fraction, [Const, Ref] optional ImVec2 size_arg, [Const] optional DOMString overlay);
    static void                    Bullet();
    static boolean                 TextLink([Const] DOMString label);
    static void                    TextLinkOpenURL([Const] DOMString label, [Const] optional DOMString url);

    // Widgets: Images
    static void                    Image(long user_texture_id, [Const, Ref] ImVec2 size, [Const, Ref] optional ImVec2 uv0, [Const, Ref] optional ImVec2 uv1, [Const, Ref] optional ImVec4 tint_col, [Const, Ref] optional ImVec4 border_col);
    static boolean                 ImageButton([Const] DOMString str_id, long user_texture_id, [Const, Ref] ImVec2 size, [Const, Ref] optional ImVec2 uv0, [Const, Ref] optional ImVec2 uv1, [Const, Ref] optional ImVec4 bg_col, [Const, Ref] optional ImVec4 tint_col);

    // Widgets: Combo Box (Dropdown)
    static boolean                 BeginCombo([Const] DOMString label, [Const] DOMString preview_value, optional ImGuiComboFlags ImGuiComboFlags);
    static void                    EndCombo();
    static boolean                 Combo([Const] DOMString label, long[] current_item, [Const] DOMString items_separated_by_zeros, optional long popup_max_height_in_items);

    // Widgets: Drag Sliders
    static boolean                 DragFloat([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragFloat2([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragFloat3([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragFloat4([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragFloatRange2([Const] DOMString label, float[] v_current_min, float[] v_current_max, optional float v_speed, optional float v_min, optional float v_max, [Const] optional DOMString format, [Const] optional DOMString format_max, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragInt([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragInt2([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragInt3([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragInt4([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 DragIntRange2([Const] DOMString label, long[] v_current_min, long[] v_current_max, optional float v_speed, optional long v_min, optional long v_max, [Const] optional DOMString format, [Const] optional DOMString format_max, optional ImGuiSliderFlags ImGuiSliderFlags);

    // Widgets: Regular Sliders
    static boolean                 SliderFloat([Const] DOMString label, float[] v, float v_min, float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderFloat2([Const] DOMString label, float[] v, float v_min, float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderFloat3([Const] DOMString label, float[] v, float v_min, float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderFloat4([Const] DOMString label, float[] v, float v_min, float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderAngle([Const] DOMString label, float[] v_rad, optional float v_degrees_min, optional float v_degrees_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderInt([Const] DOMString label, long[] v, long v_min, long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderInt2([Const] DOMString label, long[] v, long v_min, long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderInt3([Const] DOMString label, long[] v, long v_min, long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 SliderInt4([Const] DOMString label, long[] v, long v_min, long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 VSliderFloat([Const] DOMString label, [Const, Ref] ImVec2 size, float[] v, float v_min, float v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);
    static boolean                 VSliderInt([Const] DOMString label, [Const, Ref] ImVec2 size, long[] v, long v_min, long v_max, [Const] optional DOMString format, optional ImGuiSliderFlags ImGuiSliderFlags);

    // Widgets: Input with Keyboard
    static boolean                 InputText([Const] DOMString label, byte[] buf, long buf_size, optional ImGuiInputTextFlags ImGuiInputTextFlags); //, optional ImGuiInputTextCallback callback, optional ImGuiInputTextFlags flags);
    static boolean                 InputTextMultiline([Const] DOMString label, byte[] buf, long buf_size, [Const, Ref] optional ImVec2 size, optional ImGuiInputTextFlags ImGuiInputTextFlags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    static boolean                 InputTextWithHint([Const] DOMString label, [Const] DOMString hint, byte[] buf, long buf_size, optional ImGuiInputTextFlags ImGuiInputTextFlags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    static boolean                 InputFloat([Const] DOMString label, float[] v, optional float step, optional float step_fast, [Const] optional DOMString format, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputFloat2([Const] DOMString label, float[] v, [Const] optional DOMString format, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputFloat3([Const] DOMString label, float[] v, [Const] optional DOMString format, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputFloat4([Const] DOMString label, float[] v, [Const] optional DOMString format, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputInt([Const] DOMString label, long[] v, optional long step, optional long step_fast, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputInt2([Const] DOMString label, long[] v, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputInt3([Const] DOMString label, long[] v, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputInt4([Const] DOMString label, long[] v, optional ImGuiInputTextFlags ImGuiInputTextFlags);
    static boolean                 InputDouble([Const] DOMString label, double[] v, optional double step, optional double step_fast, [Const] optional DOMString format, optional ImGuiInputTextFlags ImGuiInputTextFlags);

    // Widgets: Color Editor/Picker
    static boolean                 ColorEdit3([Const] DOMString label, float[] col, optional ImGuiColorEditFlags ImGuiColorEditFlags);
    static boolean                 ColorEdit4([Const] DOMString label, float[] col, optional ImGuiColorEditFlags ImGuiColorEditFlags);
    static boolean                 ColorPicker3([Const] DOMString label, float[] col, optional ImGuiColorEditFlags ImGuiColorEditFlags);
    static boolean                 ColorPicker4([Const] DOMString label, float[] col, optional ImGuiColorEditFlags ImGuiColorEditFlags, [Const] optional float[] ref_col);
    static boolean                 ColorButton([Const] DOMString desc_id, [Const, Ref] ImVec4 col, optional ImGuiColorEditFlags ImGuiColorEditFlags, [Const, Ref] optional ImVec2 size);
    static void                    SetColorEditOptions(ImGuiColorEditFlags ImGuiColorEditFlags);

    // Widgets: Trees
    static boolean                 TreeNode([Const] DOMString label);
    static boolean                 TreeNode_2([Const] DOMString str_id, [Const] DOMString fmt);
    static boolean                 TreeNode_3([Const] any ptr_id, [Const] DOMString fmt);
    static boolean                 TreeNodeEx([Const] DOMString label, optional ImGuiTreeNodeFlags flaImGuiTreeNodeFlagsgs);
    static boolean                 TreeNodeEx_2([Const] DOMString str_id, ImGuiTreeNodeFlags ImGuiTreeNodeFlags, [Const] DOMString fmt);
    static boolean                 TreeNodeEx_3([Const] any ptr_id, ImGuiTreeNodeFlags ImGuiTreeNodeFlags, [Const] DOMString fmt);
    static void                    TreePush([Const] DOMString str_id);
    static void                    TreePop();
    static float                   GetTreeNodeToLabelSpacing();
    static boolean                 CollapsingHeader([Const] DOMString label, optional ImGuiTreeNodeFlags ImGuiTreeNodeFlags);
    static boolean                 CollapsingHeader_2([Const] DOMString label, boolean[] p_visible, optional ImGuiTreeNodeFlags ImGuiTreeNodeFlags);
    static void                    SetNextItemOpen(boolean is_open, optional ImGuiCond ImGuiCond);
    static void                    SetNextItemStorageID(long storage_id);

    // Widgets: Selectables
    static boolean                 Selectable([Const] DOMString label, optional boolean selected, optional ImGuiSelectableFlags flags, [Const, Ref] optional ImVec2 size);
    static boolean                 Selectable_2([Const] DOMString label, boolean[] p_selected, optional ImGuiSelectableFlags flags, [Const, Ref] optional ImVec2 size);

    // Multi-selection system for Selectable(), Checkbox(), TreeNode() functions
    static ImGuiMultiSelectIO      BeginMultiSelect(ImGuiMultiSelectFlags flags, optional long selection_size, optional long items_count);
    static ImGuiMultiSelectIO      EndMultiSelect();
    static void                    SetNextItemSelectionUserData(long selection_user_data);
    static boolean                 IsItemToggledSelection();

    // Widgets: List Boxes
    static boolean                 BeginListBox([Const] DOMString label, [Const, Ref] optional ImVec2 size);
    static void                    EndListBox();

    // Widgets: Data Plotting
    static void                    PlotLines([Const] DOMString label, [Const]float[] values, long values_count, optional long values_offset, [Const] optional DOMString overlay_text, optional float scale_min, optional float scale_max, [Ref] optional ImVec2 graph_size, optional long stride);
    static void                    PlotHistogram([Const] DOMString label, [Const]float[] values, long values_count, optional long values_offset, [Const] optional DOMString overlay_text, optional float scale_min, optional float scale_max, [Ref] optional ImVec2 graph_size, optional long stride);

    // Widgets: Value() Helpers.
    static void                    Value([Const] DOMString prefix, boolean b);
    static void                    Value_2([Const] DOMString prefix, long v);
    static void                    Value_4([Const] DOMString prefix, float v, [Const] optional DOMString float_format);

    // Widgets: Menus
    static boolean                 BeginMenuBar();
    static void                    EndMenuBar();
    static boolean                 BeginMainMenuBar();
    static void                    EndMainMenuBar();
    static boolean                 BeginMenu([Const] DOMString label, optional boolean enabled);
    static void                    EndMenu();
    static boolean                 MenuItem([Const] DOMString label, [Const] optional DOMString shortcut, optional boolean selected, optional boolean enabled);
    static boolean                 MenuItem_2([Const] DOMString label, [Const] DOMString shortcut, boolean[] p_selected, optional boolean enabled);

    // Tooltips
    static boolean                 BeginTooltip();
    static void                    EndTooltip();
    static void                    SetTooltip([Const] DOMString fmt);

    // Tooltips: helpers
    static boolean                 BeginItemTooltip();
    static void                    SetItemTooltip([Const] DOMString fmt);

    // Popups, Modals
    static boolean                 BeginPopup([Const] DOMString str_id, optional ImGuiWindowFlags ImGuiWindowFlags);
    static boolean                 BeginPopupModal([Const] DOMString name, optional boolean[] p_open, optional ImGuiWindowFlags ImGuiWindowFlags);
    static void                    EndPopup();

    // Popups: open/close functions
    static void                    OpenPopup([Const] DOMString str_id, optional ImGuiPopupFlags ImGuiPopupFlags);
    static void                    OpenPopup_2(long id, optional ImGuiPopupFlags ImGuiPopupFlags);
    static void                    OpenPopupOnItemClick([Const] optional DOMString str_id, optional ImGuiPopupFlags ImGuiPopupFlags);
    static void                    CloseCurrentPopup();

    // Popups: open+begin combined functions helpers
    static boolean                 BeginPopupContextItem([Const] optional DOMString str_id, optional ImGuiPopupFlags ImGuiPopupFlags);
    static boolean                 BeginPopupContextWindow([Const] optional DOMString str_id, optional ImGuiPopupFlags ImGuiPopupFlags);
    static boolean                 BeginPopupContextVoid([Const] optional DOMString str_id, optional ImGuiPopupFlags ImGuiPopupFlags);

    // Popups: query functions
    static boolean                 IsPopupOpen([Const] DOMString str_id, optional ImGuiPopupFlags ImGuiPopupFlags);

    // Tables
    static boolean                 BeginTable([Const] DOMString str_id, long column, optional ImGuiTableFlags ImGuiTableFlags, [Const, Ref] optional ImVec2 outer_size, optional float inner_width);
    static void                    EndTable();
    static void                    TableNextRow(optional long row_flags, optional float min_row_height);
    static boolean                 TableNextColumn();
    static boolean                 TableSetColumnIndex(long column_n);

    // Tables: Headers & Columns declaration
    static void                    TableSetupColumn([Const] DOMString label, optional ImGuiTableColumnFlags ImGuiTableColumnFlags, optional float init_width_or_weight, optional long user_id);
    static void                    TableSetupScrollFreeze(long cols, long rows);
    static void                    TableHeader([Const] DOMString label);
    static void                    TableHeadersRow();
    static void                    TableAngledHeadersRow();

    // Tables: Sorting & Miscellaneous functions
    static ImGuiTableSortSpecs     TableGetSortSpecs();
    static long                    TableGetColumnCount();
    static long                    TableGetColumnIndex();
    static long                    TableGetRowIndex();
//    [Const] DOMString        TableGetColumnName(optional long column_n);
    static long                    TableGetColumnFlags(optional long column_n);
    static void                    TableSetColumnEnabled(long column_n, boolean v);
    static void                    TableSetBgColor(long target, unsigned long color, optional long column_n);

    // Tab Bars, Tabs
    static boolean                 BeginTabBar([Const] DOMString str_id, optional ImGuiTabBarFlags ImGuiTabBarFlags);
    static void                    EndTabBar();
    static boolean                 BeginTabItem([Const] DOMString label, optional boolean[] p_open, optional ImGuiTabItemFlags ImGuiTabItemFlags);
    static void                    EndTabItem();
    static boolean                 TabItemButton([Const] DOMString label, ImGuiTabItemFlags ImGuiTabItemFlags);
    static void                    SetTabItemClosed([Const] DOMString tab_or_docked_window_label);

    // Docking
    static long                    DockSpace(long id, [Const, Ref] optional ImVec2 size, optional ImGuiDockNodeFlags ImGuiDockNodeFlags, [Const] optional ImGuiWindowClass window_class);
    static long                    DockSpaceOverViewport(optional long dockspace_id, [Const] optional ImGuiViewport viewport, optional ImGuiDockNodeFlags ImGuiDockNodeFlags, [Const] optional ImGuiWindowClass window_class);
    static void                    SetNextWindowDockID(long dock_id, optional ImGuiCond ImGuiCond);
    static void                    SetNextWindowClass([Const]ImGuiWindowClass window_class);
    static long                    GetWindowDockID();
    static boolean                 IsWindowDocked();

    // Logging/Capture
//    static void                    LogToTTY(optional long auto_open_depth);
//    static void                    LogToFile(optional long auto_open_depth, [Const] optional DOMString filename);
//    static void                    LogToClipboard(optional long auto_open_depth);
//    static void                    LogFinish();
//    static void                    LogButtons();
//    static void                    LogText([Const] DOMString fmt);
//    static void                    LogTextV([Const] DOMString fmt, DOMString args);

    // Drag and Drop
    static boolean                 BeginDragDropSource(optional ImGuiDragDropFlags ImGuiDragDropFlags);
    static boolean                 SetDragDropPayload([Const] DOMString type, long data, optional ImGuiCond ImGuiCond);
    static void                    EndDragDropSource();
    static boolean                 BeginDragDropTarget();
    [Const] static ImGuiPayload    AcceptDragDropPayload([Const] DOMString type, optional ImGuiDragDropFlags ImGuiDragDropFlags);
    static void                    EndDragDropTarget();
    [Const] static ImGuiPayload    GetDragDropPayload();

    // Disabling [BETA API]
    static void                    BeginDisabled(optional boolean disabled);
    static void                    EndDisabled();

    // Clipping
    static void                    PushClipRect([Const, Ref]ImVec2 clip_rect_min, [Const, Ref]ImVec2 clip_rect_max, boolean intersect_with_current_clip_rect);
    static void                    PopClipRect();

    // Focus, Activation
    static void                    SetItemDefaultFocus();
    static void                    SetKeyboardFocusHere(optional long offset);

    // Overlapping mode
    static void                    SetNextItemAllowOverlap();

    // Item/Widgets Utilities and Query Functions
    static boolean                 IsItemHovered(optional ImGuiHoveredFlags ImGuiHoveredFlags);
    static boolean                 IsItemActive();
    static boolean                 IsItemFocused();
    static boolean                 IsItemClicked(optional ImGuiMouseButton ImGuiMouseButton);
    static boolean                 IsItemVisible();
    static boolean                 IsItemEdited();
    static boolean                 IsItemActivated();
    static boolean                 IsItemDeactivated();
    static boolean                 IsItemDeactivatedAfterEdit();
    static boolean                 IsItemToggledOpen();
    static boolean                 IsAnyItemHovered();
    static boolean                 IsAnyItemActive();
    static boolean                 IsAnyItemFocused();
    static long                    GetItemID();
    [Value] static ImVec2          GetItemRectMin();
    [Value] static ImVec2          GetItemRectMax();
    [Value] static ImVec2          GetItemRectSize();

    // Viewports
    static ImGuiViewport           GetMainViewport();

    // Background/Foreground Draw Lists
    static ImDrawList              GetBackgroundDrawList();
    static ImDrawList              GetForegroundDrawList();
    static ImDrawList              GetBackgroundDrawList_2(ImGuiViewport viewport);
    static ImDrawList              GetForegroundDrawList_2(ImGuiViewport viewport);

    // Miscellaneous Utilities
    static boolean                 IsRectVisible([Const, Ref]ImVec2 size);
    static boolean                 IsRectVisible_2([Const, Ref]ImVec2 rect_min, [Const, Ref]ImVec2 rect_max);
    static double                  GetTime();
    static long                    GetFrameCount();
    static ImDrawListSharedData    GetDrawListSharedData();
////    [Const] DOMString        GetStyleColorName(long idx);
    static void                    SetStateStorage(ImGuiStorage storage);
    static ImGuiStorage            GetStateStorage();

    // Text Utilities
    [Value] static ImVec2          CalcTextSize([Const] DOMString text, [Const] optional DOMString text_end, optional boolean hide_text_after_double_hash, optional float wrap_width);

    // Color Utilities
    [Value] static ImVec4          ColorConvertU32ToFloat4(unsigned long col);
    static unsigned long           ColorConvertFloat4ToU32([Const, Ref]ImVec4 col);
    static void                    ColorConvertRGBtoHSV(float r, float g, float b, float[] out_h, float[] out_s, float[] out_v); // fix by changing to pointer
    static void                    ColorConvertHSVtoRGB(float h, float s, float v, float[] out_r, float[] out_g, float[] out_b); // fix by changing to pointer

    // Inputs Utilities: Keyboard/Mouse/Gamepad
    static boolean                 IsKeyDown(ImGuiKey ImGuiKey);
    static boolean                 IsKeyPressed(ImGuiKey ImGuiKey, optional boolean repeat);
    static boolean                 IsKeyReleased(ImGuiKey ImGuiKey);
    static boolean                 IsKeyChordPressed(long key_chord);
    static long                    GetKeyPressedAmount(ImGuiKey ImGuiKey, float repeat_delay, float rate);
////    [Const] DOMString        GetKeyName(ImGuiKey key);
    static void                    SetNextFrameWantCaptureKeyboard(boolean want_capture_keyboard);

    // Inputs Utilities: Shortcut Testing & Routing [BETA]
    static boolean                 Shortcut(long key_chord, optional ImGuiInputFlags flags);
    static void                    SetNextItemShortcut(long key_chord, optional ImGuiInputFlags flags);

    // Inputs Utilities: Key/Input Ownership [BETA]
    static void                    SetItemKeyOwner(ImGuiKey key);

    // Inputs Utilities: Mouse specific
    static boolean                 IsMouseDown(long ImGuiMouseButton);
    static boolean                 IsMouseClicked(long ImGuiMouseButton, optional boolean repeat);
    static boolean                 IsMouseReleased(long ImGuiMouseButton);
    static boolean                 IsMouseDoubleClicked(long ImGuiMouseButton);
    static long                    GetMouseClickedCount(long ImGuiMouseButton);
    static boolean                 IsMouseHoveringRect([Const, Ref]ImVec2 r_min, [Const, Ref]ImVec2 r_max, optional boolean clip);
    static boolean                 IsMousePosValid([Const] optional ImVec2 mouse_pos);
    static boolean                 IsAnyMouseDown();
    [Value] static ImVec2          GetMousePos();
    [Value] static ImVec2          GetMousePosOnOpeningCurrentPopup();
    static boolean                 IsMouseDragging(long ImGuiMouseButton, optional float lock_threshold);
    [Value] static ImVec2          GetMouseDragDelta(optional long ImGuiMouseButton, optional float lock_threshold);
    static void                    ResetMouseDragDelta(optional long ImGuiMouseButton);
    static long                    GetMouseCursor();
    static void                    SetMouseCursor(long cursor_type);
    static void                    SetNextFrameWantCaptureMouse(boolean want_capture_mouse);

    // Clipboard Utilities
//    [Const] DOMString              GetClipboardText();
    static void                    SetClipboardText([Const] DOMString text);

    // Settings/.Ini Utilities
    static void                    LoadIniSettingsFromDisk([Const] DOMString ini_filename);
    static void                    LoadIniSettingsFromMemory([Const] DOMString ini_data, optional long long ini_size);
    static void                    SaveIniSettingsToDisk([Const] DOMString ini_filename);
    [Const, Value] static IDLString SaveIniSettingsToMemory();

    // Debug Utilities
    static void                    DebugTextEncoding([Const] DOMString text);
    static boolean                 DebugCheckVersionAndDataLayout([Const] DOMString version_str, long long sz_io, long long sz_style, long long sz_vec2, long long sz_vec4, long long sz_drawvert, long long sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.

    // Memory Allocators
//    static void                    SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, optional any user_data);
//    static void                    GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, any* p_user_data);
//    static any                     MemAlloc(long long size);
//    static void                    MemFree(any ptr);

    // (Optional) Platform/OS interface for multi-viewport support
    [Ref] static ImGuiPlatformIO   GetPlatformIO();
    static void                    UpdatePlatformWindows();
    static void                    RenderPlatformWindowsDefault(optional any platform_render_arg, optional any renderer_render_arg);
    static void                    DestroyPlatformWindows();
    static ImGuiViewport           FindViewportByID(long id);
    static ImGuiViewport           FindViewportByPlatformHandle(any platform_handle);
};

//interface ImGuiSizeCallback {
//
//};
//
//[JSImplementation="ImGuiSizeCallback"]
//interface CustomImGuiSizeCallback {
//    void CustomImGuiSizeCallback();
//};

interface ImGuiInputTextCallbackData {
//    attribute byte[] Buf;
    attribute long BufSize;
    attribute boolean BufDirty;
    attribute long BufTextLen;
    attribute long Flags;
};

interface ImHelper {
    void setClipboardTextFunction(ImGuiIO io, ClipboardTextFunction clipboardFunction);
    void memcpyIdx(any destination, ImDrawList drawList, long num);
    void memcpyVtx(any destination, ImDrawList drawList, long num);
    void memcpyFont(ImFontAtlas fontAtlas, IDLByteArray pixelBuffer, long[] widthData, long[] heightData);
    void updateFontName(ImFont font, [Const] DOMString name, float size_pixels);
    long getTextureId(ImDrawCmd imDrawCmd);
    void setIniFilename(ImGuiIO io, byte[] fileName);
    void removeIniFilename(ImGuiIO io);
    long getImGuiPayloadData(ImGuiPayload payload);
};

interface ImVec2 {
    attribute float x;
    attribute float y;

    void ImVec2();
    void ImVec2(float x, float y);
};

interface ImVec4 {
    attribute float x;
    attribute float y;
    attribute float z;
    attribute float w;

    void ImVec4();
    void ImVec4(float x, float y, float z, float w);

    [Operator="=", Ref] ImVec4 copy([Ref]ImVec4 value);
};

interface ImRect {
    void ImRect();
    void ImRect(float x1, float y1, float x2, float y2);
    [Value]attribute ImVec2 Min;
    [Value]attribute ImVec2 Max;

    [Value, Const] ImVec2 GetCenter();
    [Value, Const] ImVec2 GetSize();
    float GetWidth();
    float GetHeight();
    float GetArea();
//    ImVec2 GetTL() const
//    ImVec2 GetTR() const
//    ImVec2 GetBL() const
//    ImVec2 GetBR() const
};

interface VecCmdBuffer {
    [Operator="[]", Ref] ImDrawCmd getData(long index);
    long size();
};

interface VecIdxBuffer {
    long size();
};

interface VecVtxBuffer {
    long size();
};

interface ImVectorInt {
    [Operator="[]"] unsigned long getData(long index);
    long size();
    unsigned long front();
    unsigned long back();
};

interface ImDrawCmd {
    [Value]attribute ImVec4 ClipRect;
    attribute long VtxOffset;
    attribute long IdxOffset;
    attribute long ElemCount;
    attribute any TextureId;
};

interface ImDrawVert {
    [Value]attribute ImVec2 pos;
    [Value]attribute ImVec2 uv;
    attribute long col;
};

interface ImDrawData {
    attribute long CmdListsCount;
    attribute long TotalIdxCount;
    attribute long TotalVtxCount;
    attribute ImDrawList[] CmdLists;
    [Value]attribute ImVec2 DisplayPos;
    [Value]attribute ImVec2 DisplaySize;
    [Value]attribute ImVec2 FramebufferScale;
};

interface ImDrawList {
    [Value]attribute VecCmdBuffer CmdBuffer;
    [Value]attribute VecIdxBuffer IdxBuffer;
    [Value]attribute VecVtxBuffer VtxBuffer;

    void PushClipRect([Const, Ref] ImVec2 cr_min, [Const, Ref] ImVec2 cr_max, optional boolean intersect_with_current_clip_rect);
    void PushClipRectFullScreen();
    void PopClipRect();
    void PushTextureID(any user_texture_id);
    void PopTextureID();
    [Value] ImVec2 GetClipRectMin();
    [Value] ImVec2 GetClipRectMax();

    // Primitives
    void AddLine([Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, long col, optional float thickness);
    void AddRect([Const, Ref] ImVec2 p_min, [Const, Ref] ImVec2 p_max, long col, optional float rounding, optional ImDrawFlags ImDrawFlags, optional float thickness);
    void AddRectFilled([Const, Ref] ImVec2 p_min, [Const, Ref] ImVec2 p_max, long col, optional float rounding, optional ImDrawFlags ImDrawFlags);
    void AddRectFilledMultiColor([Const, Ref] ImVec2 p_min, [Const, Ref] ImVec2 p_max, long col_upr_left, long col_upr_right, long col_bot_right, long col_bot_left);
    void AddQuad([Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, [Const, Ref] ImVec2 p3, [Const, Ref] ImVec2 p4, long col, optional float thickness);
    void AddQuadFilled([Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, [Const, Ref] ImVec2 p3, [Const, Ref] ImVec2 p4, long col);
    void AddTriangle([Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, [Const, Ref] ImVec2 p3, long col, optional float thickness);
    void AddTriangleFilled([Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, [Const, Ref] ImVec2 p3, long col);
    void AddCircle([Const, Ref] ImVec2 center, float radius, long col, optional long num_segments, optional float thickness);
    void AddCircleFilled([Const, Ref] ImVec2 center, float radius, long col, optional long num_segments);
    void AddNgon([Const, Ref] ImVec2 center, float radius, long col, long num_segments, optional float thickness);
    void AddNgonFilled([Const, Ref] ImVec2 center, float radius, long col, long num_segments);
    void AddEllipse([Const, Ref] ImVec2 center, [Const, Ref] ImVec2 radius, long col, optional float rot, optional long num_segments, optional float thickness);
    void AddEllipseFilled([Const, Ref] ImVec2 center, [Const, Ref] ImVec2 radius, long col, optional float rot, optional long num_segments);
    void AddText([Const, Ref] ImVec2 pos, long col, [Const] DOMString text_begin, [Const] optional DOMString text_end);
    void AddText([Const] ImFont font, float font_size, [Const, Ref] ImVec2 pos, long col, [Const] DOMString text_begin, [Const] optional DOMString text_end, optional float wrap_width, [Const] optional ImVec4 cpu_fine_clip_rect);
    void AddBezierCubic([Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, [Const, Ref] ImVec2 p3, [Const, Ref] ImVec2 p4, long col, float thickness, optional long num_segments);
    void AddBezierQuadratic([Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, [Const, Ref] ImVec2 p3, long col, float thickness, optional long num_segments);

    // General polygon
//    void  AddPolyline([Const] ImVec2[] points, long num_points, long col, ImDrawFlags ImDrawFlags, float thickness);
//    void  AddConvexPolyFilled([Const] ImVec2[] points, long num_points, long col);
//    void  AddConcavePolyFilled([Const] ImVec2[] points, long num_points, long col);

    // Image primitives
    void AddImage(any user_texture_id, [Const, Ref] ImVec2 p_min, [Const, Ref] ImVec2 p_max, [Const, Ref] optional ImVec2 uv_min, [Const, Ref] optional ImVec2 uv_max, optional long col);
    void AddImageQuad(any user_texture_id, [Const, Ref] ImVec2 p1, [Const, Ref] ImVec2 p2, [Const, Ref] ImVec2 p3, [Const, Ref] ImVec2 p4, [Const, Ref] optional ImVec2 uv1, [Const, Ref] optional ImVec2 uv2, [Const, Ref] optional ImVec2 uv3, [Const, Ref] optional ImVec2 uv4, optional long col);
    void AddImageRounded(any user_texture_id, [Const, Ref] ImVec2 p_min, [Const, Ref] ImVec2 p_max, [Const, Ref] ImVec2 uv_min, [Const, Ref] ImVec2 uv_max, long col, float rounding, optional ImDrawFlags ImDrawFlags);

    void PathClear();
    void PathLineTo([Const, Ref] ImVec2 pos);
    void PathLineToMergeDuplicate([Const, Ref] ImVec2 pos);
    void PathFillConvex(long col);
    void PathStroke(long col, optional ImDrawFlags ImDrawFlags, optional float thickness);

    void ChannelsSplit(long count);
    void ChannelsMerge();
    void ChannelsSetCurrent(long n);
};

interface ImGuiIO {
    attribute boolean WantCaptureMouse;
    [Value]attribute ImVec2 DisplaySize;
    [Value]attribute ImVec2 DisplayFramebufferScale;
    attribute float DeltaTime;
    attribute ImFontAtlas Fonts;
    attribute float FontGlobalScale;
    attribute boolean ConfigDockingNoSplit;
    attribute boolean ConfigDockingWithShift;
    attribute boolean ConfigDockingAlwaysTabBar;
    attribute boolean ConfigDockingTransparentPayload;
    attribute long ConfigFlags;

    attribute float IniSavingRate;
    attribute boolean WantSaveIniSettings;

    void AddMouseWheelEvent(float wheel_x, float wheel_y);
    void AddMouseButtonEvent(long button, boolean down);
    void AddMousePosEvent(float x, float y);
    void AddKeyEvent(ImGuiKey ImGuiKey, boolean down);
    void AddInputCharacter(unsigned long c);
};

interface ImFontAtlas {
    attribute any TexID;

    ImFont AddFont([Const] ImFontConfig font_cfg);
    ImFont AddFontFromMemoryTTF(any font_data, long font_data_size, long size_pixels);
};

interface ImFontConfig {
    void ImFontConfig();
    attribute any FontData;
    attribute long FontDataSize;
    attribute boolean FontDataOwnedByAtlas;
    attribute long FontNo;
    attribute float SizePixels;
    attribute long OversampleH;
    attribute long OversampleV;
    attribute boolean PixelSnapH;
    [Value] attribute ImVec2 GlyphExtraSpacing;
    [Value] attribute ImVec2 GlyphOffset;
    attribute float GlyphMinAdvanceX;
    attribute float GlyphMaxAdvanceX;
    attribute boolean MergeMode;
    attribute float RasterizerMultiply;
    attribute float RasterizerDensity;
//    attribute char[] Name;
};

interface ImFont {
    [Const] readonly attribute ImFontConfig ConfigData;
};

interface ImGuiStyle {
    attribute float             Alpha;
    attribute float             DisabledAlpha;
    [Value] attribute ImVec2    WindowPadding;
    attribute float             WindowRounding;
    attribute float             WindowBorderSize;
    [Value] attribute ImVec2    WindowMinSize;
    [Value] attribute ImVec2    WindowTitleAlign;
    attribute ImGuiDir          WindowMenuButtonPosition;
    attribute float             ChildRounding;
    attribute float             ChildBorderSize;
    attribute float             PopupRounding;
    attribute float             PopupBorderSize;
    [Value] attribute ImVec2    FramePadding;
    attribute float             FrameRounding;
    attribute float             FrameBorderSize;
    [Value] attribute ImVec2    ItemSpacing;
    [Value] attribute ImVec2    ItemInnerSpacing;
    [Value] attribute ImVec2    CellPadding;
    [Value] attribute ImVec2    TouchExtraPadding;
    attribute float             IndentSpacing;
    attribute float             ColumnsMinSpacing;
    attribute float             ScrollbarSize;
    attribute float             ScrollbarRounding;
    attribute float             GrabMinSize;
    attribute float             GrabRounding;
    attribute float             LogSliderDeadzone;
    attribute float             TabRounding;
    attribute float             TabBorderSize;
    attribute float             TabMinWidthForCloseButton;
    attribute float             TabBarBorderSize;
    attribute ImGuiDir          ColorButtonPosition;
    [Value] attribute ImVec2    ButtonTextAlign;
    [Value] attribute ImVec2    SelectableTextAlign;
    attribute float             SeparatorTextBorderSize;
    [Value] attribute ImVec2    SeparatorTextAlign;
    [Value] attribute ImVec2    SeparatorTextPadding;
    [Value] attribute ImVec2    DisplayWindowPadding;
    [Value] attribute ImVec2    DisplaySafeAreaPadding;
    attribute float             DockingSeparatorSize;
    attribute float             MouseCursorScale;
    attribute boolean           AntiAliasedLines;
    attribute boolean           AntiAliasedLinesUseTex;
    attribute boolean           AntiAliasedFill;
    attribute float             CurveTessellationTol;
    attribute float             CircleTessellationMaxError;

    attribute float             HoverStationaryDelay;
    attribute float             HoverDelayShort;
    attribute float             HoverDelayNormal;
    attribute long              HoverFlagsForTooltipMouse;
    attribute long              HoverFlagsForTooltipNav;
    [Value] attribute ImVec4[]  Colors;

    void ScaleAllSizes(float scale_factor);
};

interface ImGuiViewport {
    attribute long ID;
    attribute long Flags;
    [Value] attribute ImVec2 Pos;
    [Value] attribute ImVec2 Size;
    [Value] attribute ImVec2 WorkPos;
    [Value] attribute ImVec2 WorkSize;
    attribute float DpiScale;
    attribute long ParentViewportId;
    attribute ImDrawData DrawData;
};

interface ImGuiTableSortSpecs {
};

interface ImGuiWindowClass {
    attribute long ClassId;
    attribute long ParentViewportId;
    attribute long FocusRouteParentWindowId;
    attribute long ViewportFlagsOverrideSet;
    attribute long ViewportFlagsOverrideClear;
    attribute long TabItemFlagsOverrideSet;
    attribute long DockNodeFlagsOverrideSet;
    attribute boolean DockingAlwaysTabBar;
    attribute boolean DockingAllowUnclassed;

    void ImGuiWindowClass();
};

[NoDelete]
interface ImGuiWindow {
    [Value] readonly attribute ImVectorInt IDStack;
    [Value] readonly attribute ImGuiWindowTempData DC;
    readonly attribute long ID;
    readonly attribute long Flags;
    readonly attribute long FlagsPreviousFrame;
    readonly attribute long ViewportId;
    [Value] attribute ImVec2 ViewportPos;
    attribute long ViewportAllowPlatformMonitorExtend;
    [Value] attribute ImVec2 Pos;
    [Value] attribute ImVec2 Size;
    [Value] attribute ImVec2 SizeFull;
    [Value] attribute ImVec2 ContentSize;
    [Value] attribute ImVec2 ContentSizeIdeal;
    [Value] attribute ImVec2 ContentSizeExplicit;
    [Value] attribute ImVec2 WindowPadding;
    attribute float WindowRounding;
    attribute float WindowBorderSize;
    attribute float DecoOuterSizeX1;
    attribute float DecoOuterSizeY1;
    attribute float DecoOuterSizeX2;
    attribute float DecoOuterSizeY2;
    attribute float DecoInnerSizeX1;
    attribute float DecoInnerSizeY1;
    attribute long NameBufLen;
    readonly attribute long MoveId;
    readonly attribute long TabId;
    readonly attribute long ChildId;
    [Value] attribute ImVec2 Scroll;
    [Value] attribute ImVec2 ScrollMax;
    [Value] attribute ImVec2 ScrollTarget;
    [Value] attribute ImVec2 ScrollTargetCenterRatio;
    [Value] attribute ImVec2 ScrollTargetEdgeSnapDist;
    [Value] attribute ImVec2 ScrollbarSizes;
    attribute boolean ScrollbarX;
    attribute boolean ScrollbarY;
    attribute boolean ViewportOwned;
    attribute boolean Active;
    attribute boolean WasActive;
    attribute boolean WriteAccessed;
    attribute boolean Collapsed;
    attribute boolean WantCollapseToggle;
    attribute boolean SkipItems;
    attribute boolean Appearing;
    attribute boolean Hidden;
    attribute boolean IsFallbackWindow;
    attribute boolean IsExplicitChild;
    attribute boolean HasCloseButton;

    [Value] attribute ImGuiStorage  StateStorage;

    attribute ImDrawList DrawList;

    attribute boolean DockIsActive;
    attribute boolean DockNodeIsVisible;
    attribute boolean DockTabIsVisible;
    attribute boolean DockTabWantClose;
    attribute ImGuiDockNode DockNode;
    attribute ImGuiDockNode DockNodeAsHost;
    attribute long DockId;
    attribute long DockTabItemStatusFlags;
    [Value] attribute ImRect DockTabItemRect;

    long GetID([Const] DOMString str);
//    long GetID(long n); // Method overloading issue
    long GetIDFromRectangle([Const, Ref] ImRect r_abs);

    [Const, Value] ImRect Rect();
    float CalcFontSize();
    attribute float TitleBarHeight;
    [Const, Value] ImRect TitleBarRect();
    attribute float MenuBarHeight;
    [Const, Value] ImRect MenuBarRect();
};

[NoDelete]
interface ImGuiWindowTempData {
    [Value] readonly attribute ImVec2 CursorPos;
    attribute long TreeDepth;
};

interface ImGuiPayload {
    attribute any Data;

    [Const] boolean IsPreview();
    [Const] boolean IsDelivery();
};

interface ImDrawListSharedData {
};

interface ImGuiStorage {
    void Clear();
    long GetInt(long key, optional long default_val);
    void SetInt(long key, long val);
    boolean GetBool(long key, optional boolean default_val);
    void SetBool(long key, boolean val);
    float GetFloat(long key, optional float default_val);
    void SetFloat(long key, float val);
};

interface ImGuiPlatformIO {
};

[NoDelete]
interface ImGuiContext {
    readonly attribute double Time;
    readonly attribute long NavId;

    // Windows state
    [Value] readonly attribute ImGuiStorage      WindowsById;
    readonly attribute long                      WindowsActiveCount;
    [Value] readonly attribute ImVec2            WindowsHoverPadding;
    readonly attribute long                      DebugBreakInWindow;
    readonly attribute ImGuiWindow               CurrentWindow;
    readonly attribute ImGuiWindow               HoveredWindow;
    readonly attribute ImGuiWindow               HoveredWindowUnderMovingWindow;
    readonly attribute ImGuiWindow               MovingWindow;
    readonly attribute ImGuiWindow               WheelingWindow;

    // Item/widgets state and tracking information
    readonly attribute long                      DebugHookIdInfo;
    readonly attribute long                      HoveredId;
    readonly attribute long                      HoveredIdPreviousFrame;
    readonly attribute boolean                   HoveredIdAllowOverlap;
    readonly attribute float                     HoveredIdTimer;
    readonly attribute float                     HoveredIdNotActiveTimer;
    readonly attribute long                      ActiveId;
    readonly attribute long                      ActiveIdIsAlive;
    readonly attribute float                     ActiveIdTimer;
    readonly attribute boolean                   ActiveIdIsJustActivated;
    readonly attribute boolean                   ActiveIdAllowOverlap;
    readonly attribute boolean                   ActiveIdNoClearOnFocusLoss;
    readonly attribute boolean                   ActiveIdHasBeenPressedBefore;
    readonly attribute boolean                   ActiveIdHasBeenEditedBefore;
    readonly attribute boolean                   ActiveIdHasBeenEditedThisFrame;
    readonly attribute boolean                   ActiveIdFromShortcut;
    readonly attribute long                      ActiveIdMouseButton;
    [Value] readonly attribute ImVec2            ActiveIdClickOffset;
    readonly attribute ImGuiWindow               ActiveIdWindow;
//    attribute long                      ActiveIdSource;
    readonly attribute long                      ActiveIdPreviousFrame;
    readonly attribute boolean                   ActiveIdPreviousFrameIsAlive;
    readonly attribute boolean                   ActiveIdPreviousFrameHasBeenEditedBefore;
    readonly attribute ImGuiWindow               ActiveIdPreviousFrameWindow;
    readonly attribute long                      LastActiveId;
    readonly attribute float                     LastActiveIdTimer;

    [Value] readonly attribute ImGuiLastItemData LastItemData;
};

interface ImGuiLastItemData {
    [Value] readonly attribute ImRect            Rect;
};

interface ImGuiDockNode {
    attribute long LocalFlags;
    attribute long SelectedTabId;
    attribute ImGuiTabBar TabBar;
};

interface ImGuiTabBar {
    attribute long SelectedTabId;
    attribute long NextSelectedTabId;
};

interface ImGuiTabItem {
};

interface ImGuiShrinkWidthItem {
    attribute long Index;
    attribute float Width;
    attribute float InitialWidth;
};

interface ClipboardTextFunction {
    void onGetClipboardText(IDLString strOut);
    void onSetClipboardText(IDLString text);
};

[JSImplementation="ClipboardTextFunction"]
interface ClipboardTextFunctionImpl {
    void ClipboardTextFunctionImpl();
    void onGetClipboardText(IDLString strOut);
    void onSetClipboardText(IDLString text);
};


interface ImGuiMultiSelectIO {
    attribute boolean NavIdSelected;
    attribute boolean RangeSrcReset;
    attribute long ItemsCount;
};

enum ImGuiFocusedFlags {
    "ImGuiFocusedFlags_None",                           //[-RENAME=None]
    "ImGuiFocusedFlags_ChildWindows",                   //[-RENAME=ChildWindows]
    "ImGuiFocusedFlags_RootWindow",                     //[-RENAME=RootWindow]
    "ImGuiFocusedFlags_AnyWindow",                      //[-RENAME=AnyWindow]
    "ImGuiFocusedFlags_NoPopupHierarchy",               //[-RENAME=NoPopupHierarchy]
    "ImGuiFocusedFlags_DockHierarchy",                  //[-RENAME=DockHierarchy
    "ImGuiFocusedFlags_RootAndChildWindows"             //[-RENAME=RootAndChildWindows]
};

enum ImGuiConfigFlags {
    "ImGuiConfigFlags_None",                            //[-RENAME=None]
    "ImGuiConfigFlags_NavEnableKeyboard",               //[-RENAME=NavEnableKeyboard]
    "ImGuiConfigFlags_NavEnableGamepad",                //[-RENAME=NavEnableGamepad]
    "ImGuiConfigFlags_NavEnableSetMousePos",            //[-RENAME=NavEnableSetMousePos]
    "ImGuiConfigFlags_NavNoCaptureKeyboard",            //[-RENAME=NavNoCaptureKeyboard]
    "ImGuiConfigFlags_NoMouse",                         //[-RENAME=NoMouse]
    "ImGuiConfigFlags_NoMouseCursorChange",             //[-RENAME=NoMouseCursorChange]
    "ImGuiConfigFlags_DockingEnable",                   //[-RENAME=DockingEnable]
    "ImGuiConfigFlags_ViewportsEnable",                 //[-RENAME=ViewportsEnable]
    "ImGuiConfigFlags_DpiEnableScaleViewports",         //[-RENAME=DpiEnableScaleViewports]
    "ImGuiConfigFlags_DpiEnableScaleFonts"              //[-RENAME=DpiEnableScaleFonts]
};

enum ImGuiKey {
    "ImGuiKey_None",                                    //[-RENAME=None]
    "ImGuiKey_Tab",                                     //[-RENAME=Tab]
    "ImGuiKey_LeftArrow",                               //[-RENAME=LeftArrow]
    "ImGuiKey_RightArrow",                              //[-RENAME=RightArrow]
    "ImGuiKey_UpArrow",                                 //[-RENAME=UpArrow]
    "ImGuiKey_DownArrow",                               //[-RENAME=DownArrow]
    "ImGuiKey_PageUp",                                  //[-RENAME=PageUp]
    "ImGuiKey_PageDown",                                //[-RENAME=PageDown]
    "ImGuiKey_Home",                                    //[-RENAME=Home]
    "ImGuiKey_End",                                     //[-RENAME=End]
    "ImGuiKey_Insert",                                  //[-RENAME=Insert]
    "ImGuiKey_Delete",                                  //[-RENAME=Delete]
    "ImGuiKey_Backspace",                               //[-RENAME=Backspace]
    "ImGuiKey_Space",                                   //[-RENAME=Space]
    "ImGuiKey_Enter",                                   //[-RENAME=Enter]
    "ImGuiKey_Escape",                                  //[-RENAME=Escape]
    "ImGuiKey_LeftCtrl",                                //[-RENAME=LeftCtrl]
    "ImGuiKey_LeftShift",                               //[-RENAME=LeftShift]
    "ImGuiKey_LeftAlt",                                 //[-RENAME=LeftAlt]
    "ImGuiKey_LeftSuper",                               //[-RENAME=LeftSuper]
    "ImGuiKey_RightCtrl",                               //[-RENAME=RightCtrl]
    "ImGuiKey_RightShift",                              //[-RENAME=RightShift]
    "ImGuiKey_RightAlt",                                //[-RENAME=RightAlt]
    "ImGuiKey_RightSuper",                              //[-RENAME=RightSuper]
    "ImGuiKey_Menu",                                    //[-RENAME=Menu]
    "ImGuiKey_0",                                       //[-RENAME=Num_0]
    "ImGuiKey_1",                                       //[-RENAME=Num_1]
    "ImGuiKey_2",                                       //[-RENAME=Num_2]
    "ImGuiKey_3",                                       //[-RENAME=Num_3]
    "ImGuiKey_4",                                       //[-RENAME=Num_4]
    "ImGuiKey_5",                                       //[-RENAME=Num_5]
    "ImGuiKey_6",                                       //[-RENAME=Num_6]
    "ImGuiKey_7",                                       //[-RENAME=Num_7]
    "ImGuiKey_8",                                       //[-RENAME=Num_8]
    "ImGuiKey_9",                                       //[-RENAME=Num_9]
    "ImGuiKey_A",                                       //[-RENAME=A]
    "ImGuiKey_B",                                       //[-RENAME=B]
    "ImGuiKey_C",                                       //[-RENAME=C]
    "ImGuiKey_D",                                       //[-RENAME=D]
    "ImGuiKey_E",                                       //[-RENAME=E]
    "ImGuiKey_F",                                       //[-RENAME=F]
    "ImGuiKey_G",                                       //[-RENAME=G]
    "ImGuiKey_H",                                       //[-RENAME=H]
    "ImGuiKey_I",                                       //[-RENAME=I]
    "ImGuiKey_J",                                       //[-RENAME=J]
    "ImGuiKey_K",                                       //[-RENAME=K]
    "ImGuiKey_L",                                       //[-RENAME=L]
    "ImGuiKey_M",                                       //[-RENAME=M]
    "ImGuiKey_N",                                       //[-RENAME=N]
    "ImGuiKey_O",                                       //[-RENAME=O]
    "ImGuiKey_P",                                       //[-RENAME=P]
    "ImGuiKey_Q",                                       //[-RENAME=Q]
    "ImGuiKey_R",                                       //[-RENAME=R]
    "ImGuiKey_S",                                       //[-RENAME=S]
    "ImGuiKey_T",                                       //[-RENAME=T]
    "ImGuiKey_U",                                       //[-RENAME=U]
    "ImGuiKey_V",                                       //[-RENAME=V]
    "ImGuiKey_W",                                       //[-RENAME=W]
    "ImGuiKey_X",                                       //[-RENAME=X]
    "ImGuiKey_Y",                                       //[-RENAME=Y]
    "ImGuiKey_Z",                                       //[-RENAME=Z]
    "ImGuiKey_F1",                                      //[-RENAME=F1]
    "ImGuiKey_F2",                                      //[-RENAME=F2]
    "ImGuiKey_F3",                                      //[-RENAME=F3]
    "ImGuiKey_F4",                                      //[-RENAME=F4]
    "ImGuiKey_F5",                                      //[-RENAME=F5]
    "ImGuiKey_F6",                                      //[-RENAME=F6]
    "ImGuiKey_F7",                                      //[-RENAME=F7]
    "ImGuiKey_F8",                                      //[-RENAME=F8]
    "ImGuiKey_F9",                                      //[-RENAME=F9]
    "ImGuiKey_F10",                                     //[-RENAME=F10]
    "ImGuiKey_F11",                                     //[-RENAME=F11]
    "ImGuiKey_F12",                                     //[-RENAME=F12]
    "ImGuiKey_Apostrophe",                              //[-RENAME=Apostrophe]
    "ImGuiKey_Comma",                                   //[-RENAME=Comma]
    "ImGuiKey_Minus",                                   //[-RENAME=Minus]
    "ImGuiKey_Period",                                  //[-RENAME=Period]
    "ImGuiKey_Slash",                                   //[-RENAME=Slash]
    "ImGuiKey_Semicolon",                               //[-RENAME=Semicolon]
    "ImGuiKey_Equal",                                   //[-RENAME=Equal]
    "ImGuiKey_LeftBracket",                             //[-RENAME=LeftBracket]
    "ImGuiKey_Backslash",                               //[-RENAME=Backslash]
    "ImGuiKey_RightBracket",                            //[-RENAME=RightBracket]
    "ImGuiKey_GraveAccent",                             //[-RENAME=GraveAccent]
    "ImGuiKey_CapsLock",                                //[-RENAME=CapsLock]
    "ImGuiKey_ScrollLock",                              //[-RENAME=ScrollLock]
    "ImGuiKey_NumLock",                                 //[-RENAME=NumLock]
    "ImGuiKey_PrintScreen",                             //[-RENAME=PrintScreen]
    "ImGuiKey_Pause",                                   //[-RENAME=Pause]
    "ImGuiKey_Keypad0",                                 //[-RENAME=Keypad0]
    "ImGuiKey_Keypad1",                                 //[-RENAME=Keypad1]
    "ImGuiKey_Keypad2",                                 //[-RENAME=Keypad2]
    "ImGuiKey_Keypad3",                                 //[-RENAME=Keypad3]
    "ImGuiKey_Keypad4",                                 //[-RENAME=Keypad4]
    "ImGuiKey_Keypad5",                                 //[-RENAME=Keypad5]
    "ImGuiKey_Keypad6",                                 //[-RENAME=Keypad6]
    "ImGuiKey_Keypad7",                                 //[-RENAME=Keypad7]
    "ImGuiKey_Keypad8",                                 //[-RENAME=Keypad8]
    "ImGuiKey_Keypad9",                                 //[-RENAME=Keypad9]
    "ImGuiKey_KeypadDecimal",                           //[-RENAME=KeypadDecimal]
    "ImGuiKey_KeypadDivide",                            //[-RENAME=KeypadDivide]
    "ImGuiKey_KeypadMultiply",                          //[-RENAME=KeypadMultiply]
    "ImGuiKey_KeypadSubtract",                          //[-RENAME=KeypadSubtract]
    "ImGuiKey_KeypadAdd",                               //[-RENAME=KeypadAdd]
    "ImGuiKey_KeypadEnter",                             //[-RENAME=KeypadEnter]
    "ImGuiKey_KeypadEqual",                             //[-RENAME=KeypadEqual]
    "ImGuiKey_GamepadStart",                            //[-RENAME=GamepadStart]
    "ImGuiKey_GamepadBack",                             //[-RENAME=GamepadBack]
    "ImGuiKey_GamepadFaceLeft",                         //[-RENAME=GamepadFaceLeft]
    "ImGuiKey_GamepadFaceRight",                        //[-RENAME=GamepadFaceRight]
    "ImGuiKey_GamepadFaceUp",                           //[-RENAME=GamepadFaceUp]
    "ImGuiKey_GamepadFaceDown",                         //[-RENAME=GamepadFaceDown]
    "ImGuiKey_GamepadDpadLeft",                         //[-RENAME=GamepadDpadLeft]
    "ImGuiKey_GamepadDpadRight",                        //[-RENAME=GamepadDpadRight]
    "ImGuiKey_GamepadDpadUp",                           //[-RENAME=GamepadDpadUp]
    "ImGuiKey_GamepadDpadDown",                         //[-RENAME=GamepadDpadDown]
    "ImGuiKey_GamepadL1",                               //[-RENAME=GamepadL1]
    "ImGuiKey_GamepadR1",                               //[-RENAME=GamepadR1]
    "ImGuiKey_GamepadL2",                               //[-RENAME=GamepadL2]
    "ImGuiKey_GamepadR2",                               //[-RENAME=GamepadR2]
    "ImGuiKey_GamepadL3",                               //[-RENAME=GamepadL3
    "ImGuiKey_GamepadR3",                               //[-RENAME=GamepadR3]
    "ImGuiKey_GamepadLStickLeft",                       //[-RENAME=GamepadLStickLeft]
    "ImGuiKey_GamepadLStickRight",                      //[-RENAME=GamepadLStickRight]
    "ImGuiKey_GamepadLStickUp",                         //[-RENAME=GamepadLStickUp]
    "ImGuiKey_GamepadLStickDown",                       //[-RENAME=GamepadLStickDown]
    "ImGuiKey_GamepadRStickLeft",                       //[-RENAME=GamepadRStickLeft]
    "ImGuiKey_GamepadRStickRight",                      //[-RENAME=GamepadRStickRight]
    "ImGuiKey_GamepadRStickUp",                         //[-RENAME=GamepadRStickUp]
    "ImGuiKey_GamepadRStickDown",                       //[-RENAME=GamepadRStickDown]

    "ImGuiKey_MouseLeft",                               //[-RENAME=MouseLeft]
    "ImGuiKey_MouseRight",                              //[-RENAME=MouseRight]
    "ImGuiKey_MouseMiddle",                             //[-RENAME=MouseMiddle]
    "ImGuiKey_MouseX1",                                 //[-RENAME=MouseX1]
    "ImGuiKey_MouseX2",                                 //[-RENAME=MouseX2]
    "ImGuiKey_MouseWheelX",                             //[-RENAME=MouseWheelX]
    "ImGuiKey_MouseWheelY",                             //[-RENAME=MouseWheelY]

    "ImGuiMod_None",                                    //[-RENAME=Mod_None]
    "ImGuiMod_Ctrl",                                    //[-RENAME=Mod_Ctrl]
    "ImGuiMod_Shift",                                   //[-RENAME=Mod_Shift]
    "ImGuiMod_Alt",                                     //[-RENAME=Mod_Alt]
    "ImGuiMod_Super",                                   //[-RENAME=Mod_Super]
    "ImGuiMod_Shortcut",                                //[-RENAME=Mod_Shortcut]
    "ImGuiMod_Mask_"                                    //[-RENAME=Mod_Mask_]
};

enum ImGuiColorEditFlags {
    "ImGuiColorEditFlags_None",                         //[-RENAME=None]
    "ImGuiColorEditFlags_NoAlpha",                      //[-RENAME=NoAlpha]
    "ImGuiColorEditFlags_NoPicker",                     //[-RENAME=NoPicker]
    "ImGuiColorEditFlags_NoOptions",                    //[-RENAME=NoOptions]
    "ImGuiColorEditFlags_NoSmallPreview",               //[-RENAME=NoSmallPreview]
    "ImGuiColorEditFlags_NoTooltip",                    //[-RENAME=NoTooltip]
    "ImGuiColorEditFlags_NoLabel",                      //[-RENAME=NoLabel]
    "ImGuiColorEditFlags_NoSidePreview",                //[-RENAME=NoSidePreview]
    "ImGuiColorEditFlags_NoDragDrop",                   //[-RENAME=NoDragDrop]
    "ImGuiColorEditFlags_NoBorder",                     //[-RENAME=NoBorder]
    "ImGuiColorEditFlags_AlphaBar",                     //[-RENAME=AlphaBar]
    "ImGuiColorEditFlags_AlphaPreview",                 //[-RENAME=AlphaPreview]
    "ImGuiColorEditFlags_AlphaPreviewHalf",             //[-RENAME=AlphaPreviewHalf]
    "ImGuiColorEditFlags_HDR",                          //[-RENAME=HDR]
    "ImGuiColorEditFlags_DisplayRGB",                   //[-RENAME=DisplayRGB]
    "ImGuiColorEditFlags_DisplayHSV",                   //[-RENAME=DisplayHSV]
    "ImGuiColorEditFlags_DisplayHex",                   //[-RENAME=DisplayHex]
    "ImGuiColorEditFlags_Uint8",                        //[-RENAME=Uint8]
    "ImGuiColorEditFlags_Float",                        //[-RENAME=Float]
    "ImGuiColorEditFlags_PickerHueBar",                 //[-RENAME=PickerHueBar]
    "ImGuiColorEditFlags_PickerHueWheel",               //[-RENAME=PickerHueWheel]
    "ImGuiColorEditFlags_InputRGB",                     //[-RENAME=InputRGB]
    "ImGuiColorEditFlags_InputHSV",                     //[-RENAME=InputHSV]
    "ImGuiColorEditFlags_DefaultOptions_"               //[-RENAME=DefaultOptions_]
};

enum ImGuiButtonFlags {
    "ImGuiButtonFlags_None",                            //[-RENAME=None]
    "ImGuiButtonFlags_MouseButtonLeft",                 //[-RENAME=MouseButtonLeft]
    "ImGuiButtonFlags_MouseButtonRight",                //[-RENAME=MouseButtonRight]
    "ImGuiButtonFlags_MouseButtonMiddle"                //[-RENAME=MouseButtonMiddle]
};

enum ImGuiTableColumnFlags {
    "ImGuiTableColumnFlags_None",                       //[-RENAME=None]
    "ImGuiTableColumnFlags_Disabled",                   //[-RENAME=Disabled]
    "ImGuiTableColumnFlags_DefaultHide",                //[-RENAME=DefaultHide]
    "ImGuiTableColumnFlags_DefaultSort",                //[-RENAME=DefaultSort]
    "ImGuiTableColumnFlags_WidthStretch",               //[-RENAME=WidthStretch]
    "ImGuiTableColumnFlags_WidthFixed",                 //[-RENAME=WidthFixed]
    "ImGuiTableColumnFlags_NoResize",                   //[-RENAME=NoResize]
    "ImGuiTableColumnFlags_NoReorder",                  //[-RENAME=NoReorder]
    "ImGuiTableColumnFlags_NoHide",                     //[-RENAME=NoHide]
    "ImGuiTableColumnFlags_NoClip",                     //[-RENAME=NoClip]
    "ImGuiTableColumnFlags_NoSort",                     //[-RENAME=NoSort]
    "ImGuiTableColumnFlags_NoSortAscending",            //[-RENAME=NoSortAscending]
    "ImGuiTableColumnFlags_NoSortDescending",           //[-RENAME=NoSortDescending]
    "ImGuiTableColumnFlags_NoHeaderLabel",              //[-RENAME=NoHeaderLabel]
    "ImGuiTableColumnFlags_NoHeaderWidth",              //[-RENAME=NoHeaderWidth]
    "ImGuiTableColumnFlags_PreferSortAscending",        //[-RENAME=PreferSortAscending]
    "ImGuiTableColumnFlags_PreferSortDescending",       //[-RENAME=PreferSortDescending]
    "ImGuiTableColumnFlags_IndentEnable",               //[-RENAME=IndentEnable]
    "ImGuiTableColumnFlags_IndentDisable",              //[-RENAME=IndentDisable]
    "ImGuiTableColumnFlags_AngledHeader"                //[-RENAME=AngledHeader]
};

enum ImGuiComboFlags {
    "ImGuiComboFlags_None",                             //[-RENAME=None]
    "ImGuiComboFlags_PopupAlignLeft",                   //[-RENAME=PopupAlignLeft]
    "ImGuiComboFlags_HeightSmall",                      //[-RENAME=HeightSmall]
    "ImGuiComboFlags_HeightRegular",                    //[-RENAME=HeightRegular]
    "ImGuiComboFlags_HeightLarge",                      //[-RENAME=HeightLarge]
    "ImGuiComboFlags_HeightLargest",                    //[-RENAME=HeightLargest]
    "ImGuiComboFlags_NoArrowButton",                    //[-RENAME=NoArrowButton]
    "ImGuiComboFlags_NoPreview",                        //[-RENAME=NoPreview]
    "ImGuiComboFlags_HeightMask_"                       //[-RENAME=HeightMask_]
};

enum ImGuiDir {
    "ImGuiDir_None",                                    //[-RENAME=None]
    "ImGuiDir_Left",                                    //[-RENAME=Left]
    "ImGuiDir_Right",                                   //[-RENAME=Right]
    "ImGuiDir_Up",                                      //[-RENAME=Up]
    "ImGuiDir_Down"                                     //[-RENAME=Down]
};

enum ImGuiWindowFlags {
    "ImGuiWindowFlags_None",                            //[-RENAME=None]
    "ImGuiWindowFlags_NoTitleBar",                      //[-RENAME=NoTitleBar]
    "ImGuiWindowFlags_NoResize",                        //[-RENAME=NoResize]
    "ImGuiWindowFlags_NoMove",                          //[-RENAME=NoMove]
    "ImGuiWindowFlags_NoScrollbar",                     //[-RENAME=NoScrollbar]
    "ImGuiWindowFlags_NoScrollWithMouse",               //[-RENAME=NoScrollWithMouse]
    "ImGuiWindowFlags_NoCollapse",                      //[-RENAME=NoCollapse]
    "ImGuiWindowFlags_AlwaysAutoResize",                //[-RENAME=AlwaysAutoResize]
    "ImGuiWindowFlags_NoBackground",                    //[-RENAME=NoBackground]
    "ImGuiWindowFlags_NoSavedSettings",                 //[-RENAME=NoSavedSettings]
    "ImGuiWindowFlags_NoMouseInputs",                   //[-RENAME=NoMouseInputs]
    "ImGuiWindowFlags_MenuBar",                         //[-RENAME=MenuBar]
    "ImGuiWindowFlags_HorizontalScrollbar",             //[-RENAME=HorizontalScrollbar]
    "ImGuiWindowFlags_NoFocusOnAppearing",              //[-RENAME=NoFocusOnAppearing]
    "ImGuiWindowFlags_NoBringToFrontOnFocus",           //[-RENAME=NoBringToFrontOnFocus]
    "ImGuiWindowFlags_AlwaysVerticalScrollbar",         //[-RENAME=AlwaysVerticalScrollbar]
    "ImGuiWindowFlags_AlwaysHorizontalScrollbar",       //[-RENAME=AlwaysHorizontalScrollbar]
    "ImGuiWindowFlags_AlwaysUseWindowPadding",          //[-RENAME=AlwaysUseWindowPadding]
    "ImGuiWindowFlags_NoNavInputs",                     //[-RENAME=NoNavInputs]
    "ImGuiWindowFlags_NoNavFocus",                      //[-RENAME=NoNavFocus]
    "ImGuiWindowFlags_UnsavedDocument",                 //[-RENAME=UnsavedDocument]
    "ImGuiWindowFlags_NoDocking",                       //[-RENAME=NoDocking]
    "ImGuiWindowFlags_NoNav",                           //[-RENAME=NoNav]
    "ImGuiWindowFlags_NoDecoration",                    //[-RENAME=NoDecoration]
    "ImGuiWindowFlags_NoInputs",                        //[-RENAME=NoInputs
    "ImGuiWindowFlags_NavFlattened",                    //[-RENAME=NavFlattened]
    "ImGuiWindowFlags_ChildWindow",                     //[-RENAME=ChildWindow]
    "ImGuiWindowFlags_Tooltip",                         //[-RENAME=Tooltip]
    "ImGuiWindowFlags_Popup",                           //[-RENAME=Popup]
    "ImGuiWindowFlags_Modal",                           //[-RENAME=Modal]
    "ImGuiWindowFlags_ChildMenu",                       //[-RENAME=ChildMenu]
    "ImGuiWindowFlags_DockNodeHost"                     //[-RENAME=DockNodeHost]
};

enum ImGuiCond {
    "ImGuiCond_None",                                   //[-RENAME=None]
    "ImGuiCond_Always",                                 //[-RENAME=Always
    "ImGuiCond_Once",                                   //[-RENAME=Once
    "ImGuiCond_FirstUseEver",                           //[-RENAME=FirstUseEver]
    "ImGuiCond_Appearing"                               //[-RENAME=Appearing]
};

enum ImGuiSliderFlags {
    "ImGuiSliderFlags_None",                            //[-RENAME=None]
    "ImGuiSliderFlags_AlwaysClamp",                     //[-RENAME=AlwaysClamp]
    "ImGuiSliderFlags_Logarithmic",                     //[-RENAME=Logarithmic]
    "ImGuiSliderFlags_NoRoundToFormat",                 //[-RENAME=NoRoundToFormat]
    "ImGuiSliderFlags_NoInput"                          //[-RENAME=NoInput]
};

enum ImGuiTabBarFlags {
    "ImGuiTabBarFlags_None",                            //[-RENAME=None]
    "ImGuiTabBarFlags_Reorderable",                     //[-RENAME=Reorderable]
    "ImGuiTabBarFlags_AutoSelectNewTabs",               //[-RENAME=AutoSelectNewTabs]
    "ImGuiTabBarFlags_TabListPopupButton",              //[-RENAME=TabListPopupButton]
    "ImGuiTabBarFlags_NoCloseWithMiddleMouseButton",    //[-RENAME=NoCloseWithMiddleMouseButton]
    "ImGuiTabBarFlags_NoTabListScrollingButtons",       //[-RENAME=NoTabListScrollingButtons]
    "ImGuiTabBarFlags_NoTooltip",                       //[-RENAME=NoTooltip]
    "ImGuiTabBarFlags_FittingPolicyResizeDown",         //[-RENAME=FittingPolicyResizeDown]
    "ImGuiTabBarFlags_FittingPolicyScroll",             //[-RENAME=FittingPolicyScroll]
    "ImGuiTabBarFlags_FittingPolicyMask_",              //[-RENAME=FittingPolicyMask_]
    "ImGuiTabBarFlags_FittingPolicyDefault_"            //[-RENAME=FittingPolicyDefault_]
};

enum ImGuiTabItemFlags {
    "ImGuiTabItemFlags_None",                           //[-RENAME=None]
    "ImGuiTabItemFlags_UnsavedDocument",                //[-RENAME=UnsavedDocument]
    "ImGuiTabItemFlags_SetSelected",                    //[-RENAME=SetSelected]
    "ImGuiTabItemFlags_NoCloseWithMiddleMouseButton",   //[-RENAME=NoCloseWithMiddleMouseButton]
    "ImGuiTabItemFlags_NoPushId",                       //[-RENAME=NoPushId]
    "ImGuiTabItemFlags_NoTooltip",                      //[-RENAME=NoTooltip]
    "ImGuiTabItemFlags_NoReorder",                      //[-RENAME=NoReorder]
    "ImGuiTabItemFlags_Leading",                        //[-RENAME=Leading]
    "ImGuiTabItemFlags_Trailing"                        //[-RENAME=Trailing]
};

enum ImGuiDockNodeFlags {
    "ImGuiDockNodeFlags_None",                          //[-RENAME=None]
    "ImGuiDockNodeFlags_KeepAliveOnly",                 //[-RENAME=KeepAliveOnly]
    "ImGuiDockNodeFlags_NoDockingOverCentralNode",      //[-RENAME=NoDockingOverCentralNode]
    "ImGuiDockNodeFlags_PassthruCentralNode",           //[-RENAME=PassthruCentralNode]
    "ImGuiDockNodeFlags_NoDockingSplit",                //[-RENAME=NoDockingSplit]
    "ImGuiDockNodeFlags_NoResize",                      //[-RENAME=NoResize]
    "ImGuiDockNodeFlags_AutoHideTabBar",                //[-RENAME=AutoHideTabBar]
    "ImGuiDockNodeFlags_NoUndocking"                    //[-RENAME=NoUndocking]
};

enum ImGuiPopupFlags {
    "ImGuiPopupFlags_None",                             //[-RENAME=None]
    "ImGuiPopupFlags_MouseButtonLeft",                  //[-RENAME=MouseButtonLeft]
    "ImGuiPopupFlags_MouseButtonRight",                 //[-RENAME=MouseButtonRight]
    "ImGuiPopupFlags_MouseButtonMiddle",                //[-RENAME=MouseButtonMiddle]
    "ImGuiPopupFlags_MouseButtonMask_",                 //[-RENAME=MouseButtonMask_]
    "ImGuiPopupFlags_MouseButtonDefault_",              //[-RENAME=MouseButtonDefault_]
    "ImGuiPopupFlags_NoOpenOverExistingPopup",          //[-RENAME=NoOpenOverExistingPopup]
    "ImGuiPopupFlags_NoOpenOverItems",                  //[-RENAME=NoOpenOverItems]
    "ImGuiPopupFlags_AnyPopupId",                       //[-RENAME=AnyPopupId]
    "ImGuiPopupFlags_AnyPopupLevel",                    //[-RENAME=AnyPopupLevel]
    "ImGuiPopupFlags_AnyPopup"                          //[-RENAME=AnyPopup]
};

enum ImGuiSelectableFlags {
    "ImGuiSelectableFlags_None",                        //[-RENAME=None]
    "ImGuiSelectableFlags_DontClosePopups",             //[-RENAME=DontClosePopups]
    "ImGuiSelectableFlags_SpanAllColumns",              //[-RENAME=SpanAllColumns]
    "ImGuiSelectableFlags_AllowDoubleClick",            //[-RENAME=AllowDoubleClick]
    "ImGuiSelectableFlags_Disabled",                    //[-RENAME=Disabled]
    "ImGuiSelectableFlags_AllowOverlap"                 //[-RENAME=AllowOverlap]
};

enum ImGuiMouseButton {
    "ImGuiMouseButton_Left",                            //[-RENAME=Left]
    "ImGuiMouseButton_Right",                           //[-RENAME=Right]
    "ImGuiMouseButton_Middle"                           //[-RENAME=Middle]
};

enum ImGuiFocusRequestFlags {
    "ImGuiFocusRequestFlags_None",                      //[-RENAME=None]
    "ImGuiFocusRequestFlags_RestoreFocusedChild",       //[-RENAME=RestoreFocusedChild]
    "ImGuiFocusRequestFlags_UnlessBelowModal"           //[-RENAME=UnlessBelowModal]
};

enum ImGuiInputSource {
    "ImGuiInputSource_None",                            //[-RENAME=None]
    "ImGuiInputSource_Mouse",                           //[-RENAME=Mouse]
    "ImGuiInputSource_Keyboard",                        //[-RENAME=Keyboard]
    "ImGuiInputSource_Gamepad"                          //[-RENAME=Gamepad]
};

enum ImGuiViewportFlags {
    "ImGuiViewportFlags_None",                          //[-RENAME=None]
    "ImGuiViewportFlags_IsPlatformWindow",              //[-RENAME=IsPlatformWindow]
    "ImGuiViewportFlags_IsPlatformMonitor",             //[-RENAME=IsPlatformMonitor]
    "ImGuiViewportFlags_OwnedByApp",                    //[-RENAME=OwnedByApp
    "ImGuiViewportFlags_NoDecoration",                  //[-RENAME=NoDecoration
    "ImGuiViewportFlags_NoTaskBarIcon",                 //[-RENAME=NoTaskBarIcon]
    "ImGuiViewportFlags_NoFocusOnAppearing",            //[-RENAME=NoFocusOnAppearing]
    "ImGuiViewportFlags_NoFocusOnClick",                //[-RENAME=NoFocusOnClick]
    "ImGuiViewportFlags_NoInputs",                      //[-RENAME=NoInputs]
    "ImGuiViewportFlags_NoRendererClear",               //[-RENAME=NoRendererClear]
    "ImGuiViewportFlags_NoAutoMerge",                   //[-RENAME=NoAutoMerge]
    "ImGuiViewportFlags_TopMost",                       //[-RENAME=TopMost]
    "ImGuiViewportFlags_CanHostOtherWindows"            //[-RENAME=CanHostOtherWindows]
};

enum ImGuiChildFlags {
    "ImGuiChildFlags_None",                             //[-RENAME=None]
    "ImGuiChildFlags_Border",                           //[-RENAME=Border]
    "ImGuiChildFlags_AlwaysUseWindowPadding",           //[-RENAME=AlwaysUseWindowPadding]
    "ImGuiChildFlags_ResizeX",                          //[-RENAME=ResizeX]
    "ImGuiChildFlags_ResizeY",                          //[-RENAME=ResizeY]
    "ImGuiChildFlags_AutoResizeX",                      //[-RENAME=AutoResizeX]
    "ImGuiChildFlags_AutoResizeY",                      //[-RENAME=AutoResizeY]
    "ImGuiChildFlags_AlwaysAutoResize",                 //[-RENAME=AlwaysAutoResize]
    "ImGuiChildFlags_FrameStyle"                        //[-RENAME=FrameStyle]
};

enum ImDrawFlags {
    "ImDrawFlags_None",                                 //[-RENAME=None]
    "ImDrawFlags_Closed",                               //[-RENAME=Closed]
    "ImDrawFlags_RoundCornersTopLeft",                  //[-RENAME=RoundCornersTopLeft]
    "ImDrawFlags_RoundCornersTopRight",                 //[-RENAME=RoundCornersTopRight]
    "ImDrawFlags_RoundCornersBottomLeft",               //[-RENAME=RoundCornersBottomLeft]
    "ImDrawFlags_RoundCornersBottomRight",              //[-RENAME=RoundCornersBottomRight]
    "ImDrawFlags_RoundCornersNone",                     //[-RENAME=RoundCornersNone]
    "ImDrawFlags_RoundCornersTop",                      //[-RENAME=RoundCornersTop]
    "ImDrawFlags_RoundCornersBottom",                   //[-RENAME=RoundCornersBottom]
    "ImDrawFlags_RoundCornersLeft",                     //[-RENAME=RoundCornersLeft]
    "ImDrawFlags_RoundCornersRight",                    //[-RENAME=RoundCornersRight]
    "ImDrawFlags_RoundCornersAll",                      //[-RENAME=RoundCornersAll]
    "ImDrawFlags_RoundCornersDefault_",                 //[-RENAME=RoundCornersDefault_]
    "ImDrawFlags_RoundCornersMask_"                     //[-RENAME=RoundCornersMask_]
};

enum ImGuiItemFlags {
    "ImGuiItemFlags_None",                              //[-RENAME=None]
    "ImGuiItemFlags_NoTabStop",                         //[-RENAME=NoTabStop]
    "ImGuiItemFlags_NoNav",                             //[-RENAME=NoNav]
    "ImGuiItemFlags_NoNavDefaultFocus",                 //[-RENAME=NoNavDefaultFocus]
    "ImGuiItemFlags_ButtonRepeat",                      //[-RENAME=ButtonRepeat]
    "ImGuiItemFlags_AutoClosePopups"                    //[-RENAME=AutoClosePopups]
};

enum ImGuiDragDropFlags {
    "ImGuiDragDropFlags_None",                          //[-RENAME=None]
    "ImGuiDragDropFlags_SourceNoPreviewTooltip",        //[-RENAME=SourceNoPreviewTooltip]
    "ImGuiDragDropFlags_SourceNoDisableHover",          //[-RENAME=SourceNoDisableHover]
    "ImGuiDragDropFlags_SourceNoHoldToOpenOthers",      //[-RENAME=SourceNoHoldToOpenOthers]
    "ImGuiDragDropFlags_SourceAllowNullID",             //[-RENAME=SourceAllowNullID]
    "ImGuiDragDropFlags_SourceExtern",                  //[-RENAME=SourceExtern]
    "ImGuiDragDropFlags_SourceAutoExpirePayload",       //[-RENAME=SourceAutoExpirePayload]
    "ImGuiDragDropFlags_AcceptBeforeDelivery",          //[-RENAME=AcceptBeforeDelivery]
    "ImGuiDragDropFlags_AcceptNoDrawDefaultRect",       //[-RENAME=AcceptNoDrawDefaultRect]
    "ImGuiDragDropFlags_AcceptNoPreviewTooltip",        //[-RENAME=AcceptNoPreviewTooltip]
    "ImGuiDragDropFlags_AcceptPeekOnly"                 //[-RENAME=AcceptPeekOnly]
};

enum ImGuiTreeNodeFlags {
    "ImGuiTreeNodeFlags_None",                          //[-RENAME=None]
    "ImGuiTreeNodeFlags_Selected",                      //[-RENAME=Selected]
    "ImGuiTreeNodeFlags_Framed",                        //[-RENAME=Framed]
    "ImGuiTreeNodeFlags_AllowOverlap",                  //[-RENAME=AllowOverlap]
    "ImGuiTreeNodeFlags_NoTreePushOnOpen",              //[-RENAME=NoTreePushOnOpen]
    "ImGuiTreeNodeFlags_NoAutoOpenOnLog",               //[-RENAME=NoAutoOpenOnLog]
    "ImGuiTreeNodeFlags_DefaultOpen",                   //[-RENAME=DefaultOpen]
    "ImGuiTreeNodeFlags_OpenOnDoubleClick",             //[-RENAME=OpenOnDoubleClick]
    "ImGuiTreeNodeFlags_OpenOnArrow",                   //[-RENAME=OpenOnArrow]
    "ImGuiTreeNodeFlags_Leaf",                          //[-RENAME=Leaf]
    "ImGuiTreeNodeFlags_Bullet",                        //[-RENAME=Bullet]
    "ImGuiTreeNodeFlags_FramePadding",                  //[-RENAME=FramePadding]
    "ImGuiTreeNodeFlags_SpanAvailWidth",                //[-RENAME=SpanAvailWidth]
    "ImGuiTreeNodeFlags_SpanFullWidth",                 //[-RENAME=SpanFullWidth]
    "ImGuiTreeNodeFlags_SpanAllColumns",                //[-RENAME=SpanAllColumns]
    "ImGuiTreeNodeFlags_NavLeftJumpsBackHere",          //[-RENAME=NavLeftJumpsBackHere]
    "ImGuiTreeNodeFlags_CollapsingHeader"               //[-RENAME=CollapsingHeader]
};

enum ImGuiStyleVar {
    "ImGuiStyleVar_Alpha",                              //[-RENAME=Alpha]
    "ImGuiStyleVar_DisabledAlpha",                      //[-RENAME=DisabledAlpha]
    "ImGuiStyleVar_WindowPadding",                      //[-RENAME=WindowPadding]
    "ImGuiStyleVar_WindowRounding",                     //[-RENAME=WindowRounding]
    "ImGuiStyleVar_WindowBorderSize",                   //[-RENAME=WindowBorderSize]
    "ImGuiStyleVar_WindowMinSize",                      //[-RENAME=WindowMinSize]
    "ImGuiStyleVar_WindowTitleAlign",                   //[-RENAME=WindowTitleAlign]
    "ImGuiStyleVar_ChildRounding",                      //[-RENAME=ChildRounding]
    "ImGuiStyleVar_ChildBorderSize",                    //[-RENAME=ChildBorderSize]
    "ImGuiStyleVar_PopupRounding",                      //[-RENAME=PopupRounding]
    "ImGuiStyleVar_PopupBorderSize",                    //[-RENAME=PopupBorderSize]
    "ImGuiStyleVar_FramePadding",                       //[-RENAME=FramePadding]
    "ImGuiStyleVar_FrameRounding",                      //[-RENAME=FrameRounding]
    "ImGuiStyleVar_FrameBorderSize",                    //[-RENAME=FrameBorderSize]
    "ImGuiStyleVar_ItemSpacing",                        //[-RENAME=ItemSpacing]
    "ImGuiStyleVar_ItemInnerSpacing",                   //[-RENAME=ItemInnerSpacing]
    "ImGuiStyleVar_IndentSpacing",                      //[-RENAME=IndentSpacing]
    "ImGuiStyleVar_CellPadding",                        //[-RENAME=CellPadding]
    "ImGuiStyleVar_ScrollbarSize",                      //[-RENAME=ScrollbarSize]
    "ImGuiStyleVar_ScrollbarRounding",                  //[-RENAME=ScrollbarRounding]
    "ImGuiStyleVar_GrabMinSize",                        //[-RENAME=GrabMinSize]
    "ImGuiStyleVar_GrabRounding",                       //[-RENAME=GrabRounding]
    "ImGuiStyleVar_TabRounding",                        //[-RENAME=TabRounding]
    "ImGuiStyleVar_ButtonTextAlign",                    //[-RENAME=ButtonTextAlign]
    "ImGuiStyleVar_SelectableTextAlign",                //[-RENAME=SelectableTextAlign]
    "ImGuiStyleVar_SeparatorTextBorderSize",            //[-RENAME=SeparatorTextBorderSize]
    "ImGuiStyleVar_SeparatorTextAlign",                 //[-RENAME=SeparatorTextAlign]
    "ImGuiStyleVar_SeparatorTextPadding",               //[-RENAME=SeparatorTextPadding]
    "ImGuiStyleVar_DockingSeparatorSize"                //[-RENAME=DockingSeparatorSize]
};

enum ImGuiTableFlags {
    "ImGuiTableFlags_None",                             //[-RENAME=None]
    "ImGuiTableFlags_Resizable",                        //[-RENAME=Resizable]
    "ImGuiTableFlags_Reorderable",                      //[-RENAME=Reorderable]
    "ImGuiTableFlags_Hideable",                         //[-RENAME=Hideable]
    "ImGuiTableFlags_Sortable",                         //[-RENAME=Sortable]
    "ImGuiTableFlags_NoSavedSettings",                  //[-RENAME=NoSavedSettings]
    "ImGuiTableFlags_ContextMenuInBody",                //[-RENAME=ContextMenuInBody]
    "ImGuiTableFlags_RowBg",                            //[-RENAME=RowBg]
    "ImGuiTableFlags_BordersInnerH",                    //[-RENAME=BordersInnerH]
    "ImGuiTableFlags_BordersOuterH",                    //[-RENAME=BordersOuterH]
    "ImGuiTableFlags_BordersInnerV",                    //[-RENAME=BordersInnerV]
    "ImGuiTableFlags_BordersOuterV",                    //[-RENAME=BordersOuterV]
    "ImGuiTableFlags_BordersH",                         //[-RENAME=BordersH]
    "ImGuiTableFlags_BordersV",                         //[-RENAME=BordersV]
    "ImGuiTableFlags_BordersInner",                     //[-RENAME=BordersInner]
    "ImGuiTableFlags_BordersOuter",                     //[-RENAME=BordersOuter]
    "ImGuiTableFlags_Borders",                          //[-RENAME=Borders]
    "ImGuiTableFlags_NoBordersInBody",                  //[-RENAME=NoBordersInBod]
    "ImGuiTableFlags_NoBordersInBodyUntilResize",       //[-RENAME=NoBordersInBodyUntilResize]
    "ImGuiTableFlags_SizingFixedFit",                   //[-RENAME=SizingFixedFit]
    "ImGuiTableFlags_SizingFixedSame",                  //[-RENAME=SizingFixedSame]
    "ImGuiTableFlags_SizingStretchProp",                //[-RENAME=SizingStretchProp]
    "ImGuiTableFlags_SizingStretchSame",                //[-RENAME=SizingStretchSame]
    "ImGuiTableFlags_NoHostExtendX",                    //[-RENAME=NoHostExtendX]
    "ImGuiTableFlags_NoHostExtendY",                    //[-RENAME=NoHostExtendY]
    "ImGuiTableFlags_NoKeepColumnsVisible",             //[-RENAME=NoKeepColumnsVisible]
    "ImGuiTableFlags_PreciseWidths",                    //[-RENAME=PreciseWidths]
    "ImGuiTableFlags_NoClip",                           //[-RENAME=NoClip]
    "ImGuiTableFlags_PadOuterX",                        //[-RENAME=PadOuterX]
    "ImGuiTableFlags_NoPadOuterX",                      //[-RENAME=NoPadOuterX]
    "ImGuiTableFlags_NoPadInnerX",                      //[-RENAME=NoPadInnerX]
    "ImGuiTableFlags_ScrollX",                          //[-RENAME=ScrollX]
    "ImGuiTableFlags_ScrollY",                          //[-RENAME=ScrollY]
    "ImGuiTableFlags_SortMulti",                        //[-RENAME=SortMulti]
    "ImGuiTableFlags_SortTristate",                     //[-RENAME=SortTristate]
    "ImGuiTableFlags_HighlightHoveredColumn"            //[-RENAME=HighlightHoveredColumn]
};

enum ImGuiHoveredFlags {
    "ImGuiHoveredFlags_None",                           //[-RENAME=None]
    "ImGuiHoveredFlags_ChildWindows",                   //[-RENAME=ChildWindows]
    "ImGuiHoveredFlags_RootWindow",                     //[-RENAME=RootWindow]
    "ImGuiHoveredFlags_AnyWindow",                      //[-RENAME=AnyWindow]
    "ImGuiHoveredFlags_NoPopupHierarchy",               //[-RENAME=NoPopupHierarchy]
    "ImGuiHoveredFlags_DockHierarchy",                  //[-RENAME=DockHierarchy]
    "ImGuiHoveredFlags_AllowWhenBlockedByPopup",        //[-RENAME=AllowWhenBlockedByPopup]
    "ImGuiHoveredFlags_AllowWhenBlockedByActiveItem",   //[-RENAME=AllowWhenBlockedByActiveItem]
    "ImGuiHoveredFlags_AllowWhenOverlappedByItem",      //[-RENAME=AllowWhenOverlappedByItem]
    "ImGuiHoveredFlags_AllowWhenOverlappedByWindow",    //[-RENAME=AllowWhenOverlappedByWindow]
    "ImGuiHoveredFlags_AllowWhenDisabled",              //[-RENAME=AllowWhenDisabled]
    "ImGuiHoveredFlags_NoNavOverride",                  //[-RENAME=NoNavOverride]
    "ImGuiHoveredFlags_AllowWhenOverlapped",            //[-RENAME=AllowWhenOverlapped]
    "ImGuiHoveredFlags_RectOnly",                       //[-RENAME=RectOnly]
    "ImGuiHoveredFlags_RootAndChildWindows",            //[-RENAME=RootAndChildWindows]
    "ImGuiHoveredFlags_ForTooltip",                     //[-RENAME=ForTooltip]
    "ImGuiHoveredFlags_Stationary",                     //[-RENAME=Stationary]
    "ImGuiHoveredFlags_DelayNone",                      //[-RENAME=DelayNone]
    "ImGuiHoveredFlags_DelayShort",                     //[-RENAME=DelayShort]
    "ImGuiHoveredFlags_DelayNormal",                    //[-RENAME=DelayNormal]
    "ImGuiHoveredFlags_NoSharedDelay"                   //[-RENAME=NoSharedDelay]
};

enum ImGuiCol {
    "ImGuiCol_Text",                                    //[-RENAME=Text]
    "ImGuiCol_TextDisabled",                            //[-RENAME=TextDisabled]
    "ImGuiCol_WindowBg",                                //[-RENAME=WindowBg]
    "ImGuiCol_ChildBg",                                 //[-RENAME=ChildBg]
    "ImGuiCol_PopupBg",                                 //[-RENAME=PopupBg]
    "ImGuiCol_Border",                                  //[-RENAME=Border]
    "ImGuiCol_BorderShadow",                            //[-RENAME=BorderShadow]
    "ImGuiCol_FrameBg",                                 //[-RENAME=FrameBg]
    "ImGuiCol_FrameBgHovered",                          //[-RENAME=FrameBgHovered]
    "ImGuiCol_FrameBgActive",                           //[-RENAME=FrameBgActive]
    "ImGuiCol_TitleBg",                                 //[-RENAME=TitleBg]
    "ImGuiCol_TitleBgActive",                           //[-RENAME=TitleBgActive]
    "ImGuiCol_TitleBgCollapsed",                        //[-RENAME=TitleBgCollapsed]
    "ImGuiCol_MenuBarBg",                               //[-RENAME=MenuBarBg]
    "ImGuiCol_ScrollbarBg",                             //[-RENAME=ScrollbarBg]
    "ImGuiCol_ScrollbarGrab",                           //[-RENAME=ScrollbarGrab]
    "ImGuiCol_ScrollbarGrabHovered",                    //[-RENAME=ScrollbarGrabHovered]
    "ImGuiCol_ScrollbarGrabActive",                     //[-RENAME=ScrollbarGrabActive]
    "ImGuiCol_CheckMark",                               //[-RENAME=CheckMark]
    "ImGuiCol_SliderGrab",                              //[-RENAME=SliderGrab]
    "ImGuiCol_SliderGrabActive",                        //[-RENAME=SliderGrabActive]
    "ImGuiCol_Button",                                  //[-RENAME=Button]
    "ImGuiCol_ButtonHovered",                           //[-RENAME=ButtonHovered]
    "ImGuiCol_ButtonActive",                            //[-RENAME=ButtonActive]
    "ImGuiCol_Header",                                  //[-RENAME=Header]
    "ImGuiCol_HeaderHovered",                           //[-RENAME=HeaderHovered]
    "ImGuiCol_HeaderActive",                            //[-RENAME=HeaderActive]
    "ImGuiCol_Separator",                               //[-RENAME=Separator]
    "ImGuiCol_SeparatorHovered",                        //[-RENAME=SeparatorHovered]
    "ImGuiCol_SeparatorActive",                         //[-RENAME=SeparatorActive]
    "ImGuiCol_ResizeGrip",                              //[-RENAME=ResizeGrip]
    "ImGuiCol_ResizeGripHovered",                       //[-RENAME=ResizeGripHovered]
    "ImGuiCol_ResizeGripActive",                        //[-RENAME=ResizeGripActive]
    "ImGuiCol_Tab",                                     //[-RENAME=Tab]
    "ImGuiCol_TabHovered",                              //[-RENAME=TabHovered
    "ImGuiCol_TabActive",                               //[-RENAME=TabActive]
    "ImGuiCol_TabUnfocused",                            //[-RENAME=TabUnfocused]
    "ImGuiCol_TabUnfocusedActive",                      //[-RENAME=TabUnfocusedActive]
    "ImGuiCol_DockingPreview",                          //[-RENAME=DockingPreview]
    "ImGuiCol_DockingEmptyBg",                          //[-RENAME=DockingEmptyBg]
    "ImGuiCol_PlotLines",                               //[-RENAME=PlotLines]
    "ImGuiCol_PlotLinesHovered",                        //[-RENAME=PlotLinesHovered]
    "ImGuiCol_PlotHistogram",                           //[-RENAME=PlotHistogram]
    "ImGuiCol_PlotHistogramHovered",                    //[-RENAME=PlotHistogramHovered]
    "ImGuiCol_TableHeaderBg",                           //[-RENAME=TableHeaderBg]
    "ImGuiCol_TableBorderStrong",                       //[-RENAME=TableBorderStrong]
    "ImGuiCol_TableBorderLight",                        //[-RENAME=TableBorderLight]
    "ImGuiCol_TableRowBg",                              //[-RENAME=TableRowBg]
    "ImGuiCol_TableRowBgAlt",                           //[-RENAME=TableRowBgAlt]
    "ImGuiCol_TextSelectedBg",                          //[-RENAME=TextSelectedBg]
    "ImGuiCol_DragDropTarget",                          //[-RENAME=DragDropTarget]
    "ImGuiCol_NavHighlight",                            //[-RENAME=NavHighlight]
    "ImGuiCol_NavWindowingHighlight",                   //[-RENAME=NavWindowingHighlight]
    "ImGuiCol_NavWindowingDimBg",                       //[-RENAME=NavWindowingDimBg]
    "ImGuiCol_ModalWindowDimBg"                         //[-RENAME=ModalWindowDimBg]
};

enum ImGuiInputTextFlags {
    "ImGuiInputTextFlags_None",                         //[-RENAME=None]
    "ImGuiInputTextFlags_CharsDecimal",                 //[-RENAME=CharsDecimal]
    "ImGuiInputTextFlags_CharsHexadecimal",             //[-RENAME=CharsHexadecimal]
    "ImGuiInputTextFlags_CharsUppercase",               //[-RENAME=CharsUppercase]
    "ImGuiInputTextFlags_CharsNoBlank",                 //[-RENAME=CharsNoBlank]
    "ImGuiInputTextFlags_AutoSelectAll",                //[-RENAME=AutoSelectAll]
    "ImGuiInputTextFlags_EnterReturnsTrue",             //[-RENAME=EnterReturnsTrue]
    "ImGuiInputTextFlags_CallbackCompletion",           //[-RENAME=CallbackCompletion]
    "ImGuiInputTextFlags_CallbackHistory",              //[-RENAME=CallbackHistory]
    "ImGuiInputTextFlags_CallbackAlways",               //[-RENAME=CallbackAlways]
    "ImGuiInputTextFlags_CallbackCharFilter",           //[-RENAME=CallbackCharFilter]
    "ImGuiInputTextFlags_AllowTabInput",                //[-RENAME=AllowTabInput]
    "ImGuiInputTextFlags_CtrlEnterForNewLine",          //[-RENAME=CtrlEnterForNewLine]
    "ImGuiInputTextFlags_NoHorizontalScroll",           //[-RENAME=NoHorizontalScroll]
    "ImGuiInputTextFlags_AlwaysOverwrite",              //[-RENAME=AlwaysOverwrite]
    "ImGuiInputTextFlags_ReadOnly",                     //[-RENAME=ReadOnly]
    "ImGuiInputTextFlags_Password",                     //[-RENAME=Password]
    "ImGuiInputTextFlags_NoUndoRedo",                   //[-RENAME=NoUndoRedo]
    "ImGuiInputTextFlags_CharsScientific",              //[-RENAME=CharsScientific]
    "ImGuiInputTextFlags_CallbackResize",               //[-RENAME=CallbackResize]
    "ImGuiInputTextFlags_CallbackEdit",                 //[-RENAME=CallbackEdit]
    "ImGuiInputTextFlags_EscapeClearsAll"               //[-RENAME=EscapeClearsAll]
};

enum ImGuiMultiSelectFlags {
    "ImGuiMultiSelectFlags_None",                       //[-RENAME=None]
    "ImGuiMultiSelectFlags_SingleSelect",               //[-RENAME=SingleSelect]
    "ImGuiMultiSelectFlags_NoSelectAll",                //[-RENAME=NoSelectAll]
    "ImGuiMultiSelectFlags_NoRangeSelect",              //[-RENAME=NoRangeSelect]
    "ImGuiMultiSelectFlags_NoAutoSelect",               //[-RENAME=NoAutoSelect]
    "ImGuiMultiSelectFlags_NoAutoClear",                //[-RENAME=NoAutoClear]
    "ImGuiMultiSelectFlags_NoAutoClearOnReselect",      //[-RENAME=NoAutoClearOnReselect]
    "ImGuiMultiSelectFlags_BoxSelect1d",                //[-RENAME=BoxSelect1d]
    "ImGuiMultiSelectFlags_BoxSelect2d",                //[-RENAME=BoxSelect2d]
    "ImGuiMultiSelectFlags_BoxSelectNoScroll",          //[-RENAME=BoxSelectNoScroll]
    "ImGuiMultiSelectFlags_ClearOnEscape",              //[-RENAME=ClearOnEscape]
    "ImGuiMultiSelectFlags_ClearOnClickVoid",           //[-RENAME=ClearOnClickVoid]
    "ImGuiMultiSelectFlags_ScopeWindow",                //[-RENAME=ScopeWindow]
    "ImGuiMultiSelectFlags_ScopeRect",                  //[-RENAME=ScopeRect]
    "ImGuiMultiSelectFlags_SelectOnClick",              //[-RENAME=SelectOnClick]
    "ImGuiMultiSelectFlags_SelectOnClickRelease",       //[-RENAME=SelectOnClickRelease]
    "ImGuiMultiSelectFlags_NavWrapX"                    //[-RENAME=NavWrapX]
};

// ImGui Internal

enum ImGuiAxis {
    "ImGuiAxis_None",                                   //[-RENAME=None]
    "ImGuiAxis_X",                                      //[-RENAME=X]
    "ImGuiAxis_Y"                                       //[-RENAME=Y]
};

enum ImGuiDataType {
    "ImGuiDataType_S8",                                 //[-RENAME=S8]
    "ImGuiDataType_U8",                                 //[-RENAME=U8]
    "ImGuiDataType_S16",                                //[-RENAME=S16]
    "ImGuiDataType_U16",                                //[-RENAME=U16]
    "ImGuiDataType_S32",                                //[-RENAME=S32]
    "ImGuiDataType_U32",                                //[-RENAME=U32]
    "ImGuiDataType_S64",                                //[-RENAME=S64]
    "ImGuiDataType_U64",                                //[-RENAME=U64]
    "ImGuiDataType_Float",                              //[-RENAME=Float]
    "ImGuiDataType_Double"                              //[-RENAME=Double]
};

enum ImGuiItemStatusFlags {
    "ImGuiItemStatusFlags_None",                        //[-RENAME=None]
    "ImGuiItemStatusFlags_HoveredRect",                 //[-RENAME=HoveredRect]
    "ImGuiItemStatusFlags_HasDisplayRect",              //[-RENAME=HasDisplayRect]
    "ImGuiItemStatusFlags_Edited",                      //[-RENAME=Edited]
    "ImGuiItemStatusFlags_ToggledSelection",            //[-RENAME=ToggledSelection]
    "ImGuiItemStatusFlags_ToggledOpen",                 //[-RENAME=ToggledOpen]
    "ImGuiItemStatusFlags_HasDeactivated",              //[-RENAME=HasDeactivated]
    "ImGuiItemStatusFlags_Deactivated",                 //[-RENAME=Deactivated]
    "ImGuiItemStatusFlags_HoveredWindow",               //[-RENAME=HoveredWindow]
    "ImGuiItemStatusFlags_Visible",                     //[-RENAME=Visible]
    "ImGuiItemStatusFlags_HasClipRect"                  //[-RENAME=HasClipRect]
};

enum ImGuiDockNodeFlagsPrivate_ {
    "ImGuiDockNodeFlags_DockSpace",                     //[-RENAME=DockSpace]
    "ImGuiDockNodeFlags_CentralNode",                   //[-RENAME=CentralNode]
    "ImGuiDockNodeFlags_NoTabBar",                      //[-RENAME=NoTabBar]
    "ImGuiDockNodeFlags_HiddenTabBar",                  //[-RENAME=HiddenTabBar]
    "ImGuiDockNodeFlags_NoWindowMenuButton",            //[-RENAME=NoWindowMenuButton]
    "ImGuiDockNodeFlags_NoCloseButton",                 //[-RENAME=NoCloseButton]
    "ImGuiDockNodeFlags_NoResizeX",                     //[-RENAME=NoResizeX]
    "ImGuiDockNodeFlags_NoResizeY",                     //[-RENAME=NoResizeY]
    "ImGuiDockNodeFlags_DockedWindowsInFocusRoute",     //[-RENAME=DockedWindowsInFocusRoute]
    "ImGuiDockNodeFlags_NoDockingSplitOther",           //[-RENAME=NoDockingSplitOther]
    "ImGuiDockNodeFlags_NoDockingOverMe",               //[-RENAME=NoDockingOverMe]
    "ImGuiDockNodeFlags_NoDockingOverOther",            //[-RENAME=NoDockingOverOther]
    "ImGuiDockNodeFlags_NoDockingOverEmpty",            //[-RENAME=NoDockingOverEmpty]
    "ImGuiDockNodeFlags_NoDocking",                     //[-RENAME=NoDocking]
    "ImGuiDockNodeFlags_SharedFlagsInheritMask_",       //[-RENAME=SharedFlagsInheritMask_]
    "ImGuiDockNodeFlags_NoResizeFlagsMask_",            //[-RENAME=NoResizeFlagsMask_]
    "ImGuiDockNodeFlags_LocalFlagsTransferMask_",       //[-RENAME=LocalFlagsTransferMask_]
    "ImGuiDockNodeFlags_SavedFlagsMask_"                //[-RENAME=SavedFlagsMask_
};

enum ImGuiButtonFlagsPrivate_ {
    "ImGuiButtonFlags_PressedOnClick",                  //[-RENAME=PressedOnClick]
    "ImGuiButtonFlags_PressedOnClickRelease",           //[-RENAME=PressedOnClickRelease]
    "ImGuiButtonFlags_PressedOnClickReleaseAnywhere",   //[-RENAME=PressedOnClickReleaseAnywhere]
    "ImGuiButtonFlags_PressedOnRelease",                //[-RENAME=PressedOnRelease]
    "ImGuiButtonFlags_PressedOnDoubleClick",            //[-RENAME=PressedOnDoubleClick]
    "ImGuiButtonFlags_PressedOnDragDropHold",           //[-RENAME=PressedOnDragDropHold]
    "ImGuiButtonFlags_Repeat",                          //[-RENAME=Repeat]
    "ImGuiButtonFlags_FlattenChildren",                 //[-RENAME=FlattenChildren]
    "ImGuiButtonFlags_AllowOverlap",                    //[-RENAME=AllowOverlap]
    "ImGuiButtonFlags_DontClosePopups",                 //[-RENAME=DontClosePopupsone]
    "ImGuiButtonFlags_AlignTextBaseLine",               //[-RENAME=AlignTextBaseLine]
    "ImGuiButtonFlags_NoKeyModifiers",                  //[-RENAME=NoKeyModifiers]
    "ImGuiButtonFlags_NoHoldingActiveId",               //[-RENAME=NoHoldingActiveId]
    "ImGuiButtonFlags_NoNavFocus",                      //[-RENAME=NoNavFocus]
    "ImGuiButtonFlags_NoHoveredOnFocus",                //[-RENAME=NoHoveredOnFocus]
    "ImGuiButtonFlags_NoSetKeyOwner",                   //[-RENAME=NoSetKeyOwner]
    "ImGuiButtonFlags_NoTestKeyOwner",                  //[-RENAME=NoTestKeyOwner]
    "ImGuiButtonFlags_PressedOnMask_",                  //[-RENAME=PressedOnMask_]
    "ImGuiButtonFlags_PressedOnDefault_"                //[-RENAME=PressedOnDefault_]
};

enum ImGuiInputFlags {
    "ImGuiInputFlags_None",                             //[-RENAME=None]
    "ImGuiInputFlags_Repeat",                           //[-RENAME=Repeat]
    "ImGuiInputFlags_RouteActive",                      //[-RENAME=RouteActive]
    "ImGuiInputFlags_RouteFocused",                     //[-RENAME=RouteFocused]
    "ImGuiInputFlags_RouteGlobal",                      //[-RENAME=RouteGlobal]
    "ImGuiInputFlags_RouteAlways",                      //[-RENAME=RouteAlways]
    "ImGuiInputFlags_RouteOverFocused",                 //[-RENAME=RouteOverFocused]
    "ImGuiInputFlags_RouteOverActive",                  //[-RENAME=RouteOverActive]
    "ImGuiInputFlags_RouteUnlessBgFocused",             //[-RENAME=RouteUnlessBgFocused]
    "ImGuiInputFlags_RouteFromRootWindow",              //[-RENAME=RouteFromRootWindow]
    "ImGuiInputFlags_Tooltip"                           //[-RENAME=Tooltip]
};

enum ImGuiScrollFlags {
    "ImGuiScrollFlags_None",                            //[-RENAME=None]
    "ImGuiScrollFlags_KeepVisibleEdgeX",                //[-RENAME=KeepVisibleEdgeX]
    "ImGuiScrollFlags_KeepVisibleEdgeY",                //[-RENAME=KeepVisibleEdgeY]
    "ImGuiScrollFlags_KeepVisibleCenterX",              //[-RENAME=KeepVisibleCenterX]
    "ImGuiScrollFlags_KeepVisibleCenterY",              //[-RENAME=KeepVisibleCenterY]
    "ImGuiScrollFlags_AlwaysCenterX",                   //[-RENAME=AlwaysCenterX]
    "ImGuiScrollFlags_AlwaysCenterY",                   //[-RENAME=AlwaysCenterY]
    "ImGuiScrollFlags_NoScrollParent",                  //[-RENAME=NoScrollParent]
    "ImGuiScrollFlags_MaskX_",                          //[-RENAME=MaskX_]
    "ImGuiScrollFlags_MaskY_"                           //[-RENAME=MaskY_]
};