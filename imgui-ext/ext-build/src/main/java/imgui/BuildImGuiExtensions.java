package imgui;

import com.github.xpenatan.jparser.builder.BuildMultiTarget;
import com.github.xpenatan.jparser.builder.targets.EmscriptenTarget;
import com.github.xpenatan.jparser.builder.targets.LinuxTarget;
import com.github.xpenatan.jparser.builder.targets.MacTarget;
import com.github.xpenatan.jparser.builder.targets.WindowsMSVCTarget;
import com.github.xpenatan.jparser.builder.tool.BuildToolListener;
import com.github.xpenatan.jparser.builder.tool.BuildToolOptions;
import com.github.xpenatan.jparser.builder.tool.BuilderTool;
import com.github.xpenatan.jparser.idl.IDLReader;
import java.io.File;
import java.util.ArrayList;

public class BuildImGuiExtensions {

    public static void main(String[] args) throws Exception {
//        WindowsMSVCTarget.DEBUG_BUILD = true;

        String libName = "imgui";
        String basePackage = "imgui";
        String modulePrefix = "imgui";
        String sourceDir =  "";  // Ext dont need source
        BuildToolOptions op = new BuildToolOptions(libName, basePackage, modulePrefix, sourceDir, args);
        String imguiPath = new File("./../../imgui").getCanonicalPath().replace("\\", "/");
        String extensionsPath = new File("./../../extensions").getCanonicalPath().replace("\\", "/");

        op.libPath = imguiPath;

        // Don't generate anything because it already generated by extensions and imgui build modules.
        op.generateCPP = false;
        op.generateTeaVM = false;

        BuilderTool.build(op, new BuildToolListener() {
            @Override
            public void onAddTarget(BuildToolOptions op, IDLReader idlReader, ArrayList<BuildMultiTarget> targets) {
                if(op.teavm) {
                    targets.add(getTeaVMTarget(op, idlReader, extensionsPath));
                }
                if(op.windows64) {
                    targets.add(getWindowTarget(op, extensionsPath));
                }
                if(op.linux64) {
                    targets.add(getLinuxTarget(op, extensionsPath));
                }
                if(op.mac64) {
                    targets.add(getMacTarget(op, false, extensionsPath));
                }
                if(op.macArm) {
                    targets.add(getMacTarget(op, true, extensionsPath));
                }
//                if(op.android) {
//                    targets.add(getAndroidTarget(op, extensionsPath));
//                }
//                if(op.iOS) {
//                    targets.add(getIOSTarget(op));
//                }
            }
        });
    }

    private static BuildMultiTarget getWindowTarget(BuildToolOptions op, String extensionsPath) {
        BuildMultiTarget multiTarget = new BuildMultiTarget();
        String imguiCppPath = op.libPath + "/imgui-build/build/imgui";
        String libBuildCPPPath = op.getModuleBuildCPPPath();

        WindowsMSVCTarget glueTarget = new WindowsMSVCTarget();
        glueTarget.libDirSuffix += "ext/";
        glueTarget.addJNIHeaders();
        glueTarget.headerDirs.add("-I" + imguiCppPath);
        glueTarget.headerDirs.add("-I" + op.getCustomSourceDir());
        glueTarget.linkerFlags.add(libBuildCPPPath + "/libs/windows/vc/imgui64_.lib");
        glueTarget.cppInclude.add(libBuildCPPPath + "/src/jniglue/JNIGlue.cpp");

        {
            // ImLayout extension
            String imlayoutCPPPath = extensionsPath + "/imlayout/imlayout-build/build/c++";
            String imlayoutCPPSource = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/source";
            String imlayoutCPPCustom = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/custom";
            glueTarget.headerDirs.add("-I" + imlayoutCPPSource);
            glueTarget.headerDirs.add("-I" + imlayoutCPPCustom);
            glueTarget.linkerFlags.add(imlayoutCPPPath + "/libs/windows/vc/imlayout64_.lib");
            glueTarget.headerDirs.add("/FI" + "\"" + imlayoutCPPPath + "/src/jniglue/JNIGlue.h" + "\"");
        }
        {
            // ImGuiColorTextEdit extension
            String textEditCPPPath = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/c++";
            String textEditCPPSource = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/ImGuiColorTextEdit";
            String textEditCPPCustom = extensionsPath + "/ImGuiColorTextEdit/textedit-build/src/main/cpp/custom";
            glueTarget.headerDirs.add("-I" + textEditCPPSource);
            glueTarget.headerDirs.add("-I" + textEditCPPSource + "/vendor/regex/include");
            glueTarget.headerDirs.add("-I" + textEditCPPCustom);
            glueTarget.linkerFlags.add(textEditCPPPath + "/libs/windows/vc/textedit64_.lib");
            glueTarget.headerDirs.add("/FI" + "\"" + textEditCPPPath + "/src/jniglue/JNIGlue.h" + "\"");
        }
        {
            // imgui-node-editor extension
            String nodeeditorCPPPath = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/c++";
            String nodeeditorCPPSource = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/imgui-node-editor";
            String nodeeditorCPPCustom = extensionsPath + "/imgui-node-editor/nodeeditor-build/src/main/cpp/custom";
            glueTarget.headerDirs.add("-I" + nodeeditorCPPSource);
            glueTarget.headerDirs.add("-I" + nodeeditorCPPCustom);
            glueTarget.linkerFlags.add(nodeeditorCPPPath + "/libs/windows/vc/nodeeditor64_.lib");
            glueTarget.headerDirs.add("/FI" + "\"" + nodeeditorCPPPath + "/src/jniglue/JNIGlue.h" + "\"");
        }

        multiTarget.add(glueTarget);
        return multiTarget;
    }

    private static BuildMultiTarget getLinuxTarget(BuildToolOptions op, String extensionsPath) {
        BuildMultiTarget multiTarget = new BuildMultiTarget();
        String imguiCppPath = op.libPath + "/imgui-build/build/imgui";
        String libBuildCPPPath = op.getModuleBuildCPPPath();

        LinuxTarget glueTarget = new LinuxTarget();
        glueTarget.libDirSuffix += "ext/";
        glueTarget.addJNIHeaders();
        glueTarget.headerDirs.add("-I" + imguiCppPath);
        glueTarget.headerDirs.add("-I" + op.getCustomSourceDir());
        glueTarget.linkerFlags.add(libBuildCPPPath + "/libs/linux/libimgui64_.a");
        glueTarget.cppInclude.add(libBuildCPPPath + "/src/jniglue/JNIGlue.cpp");

        {
            // ImLayout extension
            String imlayoutCPPPath = extensionsPath + "/imlayout/imlayout-build/build/c++";
            String imlayoutCPPSource = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/source";
            String imlayoutCPPCustom = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/custom";
            glueTarget.headerDirs.add("-I" + imlayoutCPPSource);
            glueTarget.headerDirs.add("-I" + imlayoutCPPCustom);
            glueTarget.linkerFlags.add(imlayoutCPPPath + "/libs/linux/libimlayout64_.a");
            glueTarget.headerDirs.add("-include" + imlayoutCPPPath + "/src/jniglue/JNIGlue.h");
        }
        {
            // ImGuiColorTextEdit extension
            String textEditCPPPath = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/c++";
            String textEditCPPSource = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/ImGuiColorTextEdit";
            String textEditCPPCustom = extensionsPath + "/ImGuiColorTextEdit/textedit-build/src/main/cpp/custom";
            glueTarget.headerDirs.add("-I" + textEditCPPSource);
            glueTarget.headerDirs.add("-I" + textEditCPPSource + "/vendor/regex/include");
            glueTarget.headerDirs.add("-I" + textEditCPPCustom);
            glueTarget.linkerFlags.add(textEditCPPPath + "/libs/linux/libtextedit64_.a");
            glueTarget.headerDirs.add("-include" + textEditCPPPath + "/src/jniglue/JNIGlue.h");
        }
        {
            // imgui-node-editor extension
            String nodeeditorCPPPath = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/c++";
            String nodeeditorCPPSource = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/imgui-node-editor";
            String nodeeditorCPPCustom = extensionsPath + "/imgui-node-editor/nodeeditor-build/src/main/cpp/custom";
            glueTarget.headerDirs.add("-I" + nodeeditorCPPSource);
            glueTarget.headerDirs.add("-I" + nodeeditorCPPCustom);
            glueTarget.linkerFlags.add(nodeeditorCPPPath + "/libs/linux/libnodeeditor64_.a");
            glueTarget.headerDirs.add("-include" + nodeeditorCPPPath + "/src/jniglue/JNIGlue.h");
        }

        multiTarget.add(glueTarget);
        return multiTarget;
    }

    private static BuildMultiTarget getMacTarget(BuildToolOptions op, boolean isArm, String extensionsPath) {
        BuildMultiTarget multiTarget = new BuildMultiTarget();
        String imguiCppPath = op.libPath + "/imgui-build/build/imgui";
        String libBuildCPPPath = op.getModuleBuildCPPPath();

        MacTarget macGlueTarget = new MacTarget(isArm);
        macGlueTarget.libDirSuffix += "ext/";
        macGlueTarget.addJNIHeaders();
        macGlueTarget.headerDirs.add("-I" + imguiCppPath);
        macGlueTarget.headerDirs.add("-I" + op.getCustomSourceDir());
        if(isArm) {
            macGlueTarget.linkerFlags.add(libBuildCPPPath + "/libs/mac/arm/libimgui64_.a");
        }
        else {
            macGlueTarget.linkerFlags.add(libBuildCPPPath + "/libs/mac/libimgui64_.a");
        }
        macGlueTarget.cppInclude.add(libBuildCPPPath + "/src/jniglue/JNIGlue.cpp");

        {
            // ImLayout extension
            String imlayoutCPPPath = extensionsPath + "/imlayout/imlayout-build/build/c++";
            String imlayoutCPPSource = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/source";
            String imlayoutCPPCustom = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/custom";
            macGlueTarget.headerDirs.add("-I" + imlayoutCPPSource);
            macGlueTarget.headerDirs.add("-I" + imlayoutCPPCustom);
            if(isArm) {
                macGlueTarget.linkerFlags.add(imlayoutCPPPath + "/libs/mac/arm/libimlayout64_.a");
            }
            else {
                macGlueTarget.linkerFlags.add(imlayoutCPPPath + "/libs/mac/libimlayout64_.a");
            }
            macGlueTarget.headerDirs.add("-include" + imlayoutCPPPath + "/src/jniglue/JNIGlue.h");
        }
        {
            // ImGuiColorTextEdit extension
            String textEditCPPPath = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/c++";
            String textEditCPPSource = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/ImGuiColorTextEdit";
            String textEditCPPCustom = extensionsPath + "/ImGuiColorTextEdit/textedit-build/src/main/cpp/custom";
            macGlueTarget.headerDirs.add("-I" + textEditCPPSource);
            macGlueTarget.headerDirs.add("-I" + textEditCPPSource + "/vendor/regex/include");
            macGlueTarget.headerDirs.add("-I" + textEditCPPCustom);
            if(isArm) {
                macGlueTarget.linkerFlags.add(textEditCPPPath + "/libs/mac/arm/libtextedit64_.a");
            }
            else {
                macGlueTarget.linkerFlags.add(textEditCPPPath + "/libs/mac/libtextedit64_.a");
            }
            macGlueTarget.headerDirs.add("-include" + textEditCPPPath + "/src/jniglue/JNIGlue.h");
        }
        {
            // imgui-node-editor extension
            String nodeeditorCPPPath = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/c++";
            String nodeeditorCPPSource = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/imgui-node-editor";
            String nodeeditorCPPCustom = extensionsPath + "/imgui-node-editor/nodeeditor-build/src/main/cpp/custom";
            macGlueTarget.headerDirs.add("-I" + nodeeditorCPPSource);
            macGlueTarget.headerDirs.add("-I" + nodeeditorCPPCustom);
            if(isArm) {
                macGlueTarget.linkerFlags.add(nodeeditorCPPPath + "/libs/mac/arm/libnodeeditor64_.a");
            }
            else {
                macGlueTarget.linkerFlags.add(nodeeditorCPPPath + "/libs/mac/libnodeeditor64_.a");
            }
            macGlueTarget.headerDirs.add("-include" + nodeeditorCPPPath + "/src/jniglue/JNIGlue.h");
        }

        multiTarget.add(macGlueTarget);

        return multiTarget;
    }

    private static BuildMultiTarget getTeaVMTarget(BuildToolOptions op, IDLReader idlReaderCombined, String extensionsPath) {
        BuildMultiTarget multiTarget = new BuildMultiTarget();
        String imguiCppPath = op.libPath + "/imgui-build/build/imgui";
        String libBuildCPPPath = op.getModuleBuildCPPPath();

        // Compile glue code and link to make js file
        EmscriptenTarget linkTarget = new EmscriptenTarget(idlReaderCombined);
        linkTarget.libDirSuffix += "ext/";
        linkTarget.headerDirs.add("-I" + imguiCppPath);
        linkTarget.headerDirs.add("-include" + op.getCustomSourceDir() + "ImGuiCustom.h");
        linkTarget.linkerFlags.add(libBuildCPPPath + "/libs/emscripten/imgui_.a");

        {
            // ImLayout extension
            String imlayoutCPPPath = extensionsPath + "/imlayout/imlayout-build/build/c++";
            String imlayoutCPPSource = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/source";
            String imlayoutCPPCustom = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/custom";
            String imlayoutIdlPath = extensionsPath + "/imlayout/imlayout-build/src/main/cpp/imlayout.idl";
            IDLReader.addIDL(idlReaderCombined, imlayoutIdlPath);
            linkTarget.headerDirs.add("-I" + imlayoutCPPSource);
            linkTarget.headerDirs.add("-include" + imlayoutCPPCustom + "/ImLayoutCustom.h");
            linkTarget.linkerFlags.add(imlayoutCPPPath + "/libs/emscripten/imlayout_.a");
        }
        {
            // ImGuiColorTextEdit extension

            String textEditCPPPath = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/c++";
            String textEditCPPSource = extensionsPath + "/ImGuiColorTextEdit/textedit-build/build/ImGuiColorTextEdit";
            String textEditCPPCustom = extensionsPath + "/ImGuiColorTextEdit/textedit-build/src/main/cpp/custom";
            String texteditIdlPath = extensionsPath + "/ImGuiColorTextEdit/textedit-build/src/main/cpp/ColorTextEdit.idl";
            IDLReader.addIDL(idlReaderCombined, texteditIdlPath);
            linkTarget.headerDirs.add("-I" + textEditCPPSource);
            linkTarget.headerDirs.add("-I" + textEditCPPSource + "/vendor/regex/include");
            linkTarget.headerDirs.add("-include" + textEditCPPCustom + "/TextEditCustom.h");
            linkTarget.linkerFlags.add(textEditCPPPath + "/libs/emscripten/textedit_.a");
        }
        {
            // imgui-node-editor extension
            String nodeeditorCPPPath = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/c++";
            String nodeeditorCPPSource = extensionsPath + "/imgui-node-editor/nodeeditor-build/build/imgui-node-editor";
            String nodeeditorCPPCustom = extensionsPath + "/imgui-node-editor/nodeeditor-build/src/main/cpp/custom";
            String nodeeditorIdlPath = extensionsPath + "/imgui-node-editor/nodeeditor-build/src/main/cpp/nodeeditor.idl";
            IDLReader.addIDL(idlReaderCombined, nodeeditorIdlPath);
            linkTarget.headerDirs.add("-I" + nodeeditorCPPSource);
            linkTarget.headerDirs.add("-include" + nodeeditorCPPCustom + "/NodeEditorCustom.h");
            linkTarget.linkerFlags.add(nodeeditorCPPPath + "/libs/emscripten/nodeeditor_.a");
        }
        multiTarget.add(linkTarget);

        return multiTarget;
    }
}