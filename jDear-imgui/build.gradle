plugins {
    id 'java'
	id 'de.undercouch.download' version '4.0.2'
}

apply from: '../dependencies.gradle'

def imgui_version = project.jDearImguiVersion
def imgui_name = "jDear-Imgui"

dependencies {
	implementation "com.badlogicgames.gdx:gdx-jnigen:$project.gdxVersion"

    // Use JUnit test framework
    testImplementation "junit:junit:$project.jUnitVersion"
}

project.ext.mainClassName = "com.github.xpenatan.imgui.generate.Build"
sourceSets.main.java.srcDirs = [ "src/main/java/" ]
sourceSets.main.resources.srcDirs = ["src/main/java/"]

clean.doFirst {
	def jniPath = projectDir.toString() + "/jni/"
	def libPath = projectDir.toString() + "/libs/"
	project.delete(files(jniPath))
	project.delete(files(libPath))
}

task downloadZipFile(type: Download) {
//	src 'https://api.github.com/repos/ocornut/imgui/zipball/v1.74'
//	src 'https://github.com/ocornut/imgui/archive/master.zip'
	src 'https://github.com/ocornut/imgui/archive/docking.zip'
	dest new File(buildDir, '1.0.zip')
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
	from zipTree(downloadZipFile.dest)

	eachFile { fcd ->
		include "ocornut-imgui*/"
		def paths = fcd.relativePath.segments.drop(1)
		fcd.relativePath = new RelativePath(true, paths)  // (2)
		def fullString = paths.toString()
		if(paths.length > 1 || !(fullString.contains(".h") || fullString.contains(".cpp")))
			fcd.exclude()
	}

	includeEmptyDirs = false

	into {
		 projectDir.toString() + "/jni/src/"
	}
}

task BuildImGui(dependsOn: [downloadAndUnzipFile, classes], type: JavaExec) {
	group = 'build'
	description = 'Build jDear ImGui'

	main = project.mainClassName
	classpath = sourceSets.main.runtimeClasspath
}

task fromClasses (type: Jar) {
	from (sourceSets.main.output){
		exclude "com/github/xpenatan/imgui/generate/**"
	}
}

task platformAll (type: Jar) {
	dependsOn BuildImGui
	archiveClassifier = "desktop"
	from zipTree(projectDir.toString() + "/libs/gdx-imgui-natives.jar")
}

publishing {
	publications {
		publisha1(MavenPublication) {
			version imgui_version
			project.version = imgui_version
			artifactId imgui_name
			artifact fromClasses
		}
		publishb1(MavenPublication) {
			version imgui_version
			project.version = imgui_version
			artifactId imgui_name + "-platform"
			artifact platformAll
		}
	}
}

install {
	dependsOn BuildImGui
}