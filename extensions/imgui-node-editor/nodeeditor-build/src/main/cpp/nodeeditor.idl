
interface NodeEditor {
    static void SetCurrentEditor(EditorContext ctx);
    static EditorContext GetCurrentEditor();
    static EditorContext CreateEditor(optional LoadSaveSettingsListener listener);
    static void DestroyEditor(EditorContext ctx);
    [Const, Ref] static Config GetConfig(optional EditorContext ctx);

    [Ref] static Style GetStyle();
    [Const, Value] static IDLString GetStyleColorName(StyleColor colorIndex);

    static void PushStyleColor(StyleColor colorIndex, [Const, Ref] ImVec4 color);
    static void PopStyleColor(optional long count);

    static void PushStyleVar_1(StyleVar varIndex, float value);
    static void PushStyleVar_2(StyleVar varIndex, [Const, Ref] ImVec2 value);
    static void PushStyleVar_3(StyleVar varIndex, [Const, Ref] ImVec4 value);
    static void PopStyleVar(optional long count);

    static void Begin([Const] DOMString id, [Const, Ref] optional ImVec2 size);
    static void End();

    static void BeginNode(long id);
    static void BeginPin(long id, PinKind kind);
    static void PinRect([Const, Ref] ImVec2 a, [Const, Ref] ImVec2 b);
    static void PinPivotRect([Const, Ref] ImVec2 a, [Const, Ref] ImVec2 b);
    static void PinPivotSize([Const, Ref] ImVec2 size);
    static void PinPivotScale([Const, Ref] ImVec2 scale);
    static void PinPivotAlignment([Const, Ref] ImVec2 alignment);
    static void EndPin();
    static void Group([Const, Ref] ImVec2 size);
    static void EndNode();

    static boolean BeginGroupHint(long nodeId);
    [Value] static ImVec2 GetGroupMin();
    [Value] static ImVec2 GetGroupMax();
    static ImDrawList GetHintForegroundDrawList();
    static ImDrawList GetHintBackgroundDrawList();
    static void EndGroupHint();

    static ImDrawList GetNodeBackgroundDrawList(long nodeId);

    static boolean Link(long id, long startPinId, long endPinId, [Const, Ref] optional ImVec4 color, optional float thickness);

    static void Flow(long linkId, optional FlowDirection direction);

    static boolean BeginCreate([Const, Ref] optional ImVec4 color, optional float thickness);
    static boolean QueryNewLink(long long[] startId, long long[] endId);
    static boolean QueryNewLink(long long[] startId, long long[] endId, [Const, Ref] ImVec4 color, optional float thickness);
    static boolean QueryNewNode(long long[] pinId);
    static boolean QueryNewNode(long long[] pinId, [Const, Ref] ImVec4 color, optional float thickness);
    static boolean AcceptNewItem();
    static boolean AcceptNewItem([Const, Ref] ImVec4 color, optional float thickness);
    static void RejectNewItem();
    static void RejectNewItem([Const, Ref] ImVec4 color, optional float thickness);
    static void EndCreate();

    static boolean BeginDelete();
    static boolean QueryDeletedLink(long long[] linkId, optional long long[] startId, optional long long[] endId);
    static boolean QueryDeletedNode(long long[] nodeId);
    static boolean AcceptDeletedItem(optional boolean deleteDependencies);
    static void RejectDeletedItem();
    static void EndDelete();

    static void SetNodePosition(long nodeId, [Const, Ref] ImVec2 editorPosition);
    static void SetGroupSize(long nodeId, [Const, Ref] ImVec2 size);
    [Value] static ImVec2 GetNodePosition(long nodeId);
    [Value] static ImVec2 GetNodeSize(long nodeId);
    static void CenterNodeOnScreen(long nodeId);
    static void SetNodeZPosition(long nodeId, float z);
    static float GetNodeZPosition(long nodeId);

    static void RestoreNodeState(long nodeId);

    static void Suspend();
    static void Resume();
    static boolean IsSuspended();

    static boolean IsActive();

    static boolean HasSelectionChanged();
    static long  GetSelectedObjectCount();
    static long  GetSelectedNodes(long long[] nodes, long size);
    static long  GetSelectedLinks(long long[] links, long size);
    static boolean IsNodeSelected(long nodeId);
    static boolean IsLinkSelected(long linkId);
    static void ClearSelection();
    static void SelectNode(long nodeId, optional boolean append);
    static void SelectLink(long linkId, optional boolean append);
    static void DeselectNode(long nodeId);
    static void DeselectLink(long linkId);

    static boolean DeleteNode(long nodeId);
    static boolean DeleteLink(long linkId);

    static boolean HasAnyLinksNode(long nodeId);
    static boolean HasAnyLinksPin(long pinId);
    static long BreakLinksNode(long nodeId);
    static long BreakLinksPin(long pinId);

    static void NavigateToContent(optional float duration);
    static void NavigateToSelection(optional boolean zoomIn, optional float duration);

    static boolean ShowNodeContextMenu(long long[] nodeId);
    static boolean ShowPinContextMenu(long long[] pinId);
    static boolean ShowLinkContextMenu(long long[] linkId);
    static boolean ShowBackgroundContextMenu();

    static void EnableShortcuts(boolean enable);
    static boolean AreShortcutsEnabled();

    static boolean BeginShortcut();
    static boolean AcceptCut();
    static boolean AcceptCopy();
    static boolean AcceptPaste();
    static boolean AcceptDuplicate();
    static boolean AcceptCreateNode();
    static long  GetActionContextSize();
    static long  GetActionContextNodes(long long[] nodes, long size);
    static long  GetActionContextLinks(long long[] links, long size);
    static void EndShortcut();

    static float GetCurrentZoom();

    static long GetHoveredNode();
    static long GetHoveredPin();
    static long GetHoveredLink();
    static long GetDoubleClickedNode();
    static long GetDoubleClickedPin();
    static long GetDoubleClickedLink();
    static boolean IsBackgroundClicked();
    static boolean IsBackgroundDoubleClicked();
    static long GetBackgroundClickButtonIndex();
    static long GetBackgroundDoubleClickButtonIndex();

    static boolean GetLinkPins(long linkId, long long[] startPinId, long long[] endPinId);

    static boolean PinHadAnyLinks(long pinId);

    [Value] static ImVec2 GetScreenSize();
    [Value] static ImVec2 ScreenToCanvas([Const, Ref] ImVec2 pos);
    [Value] static ImVec2 CanvasToScreen([Const, Ref] ImVec2 pos);

    static long GetNodeCount();
    static long GetOrderedNodeIds(long long[] nodes, long size);
};

interface LoadSaveSettingsListener {
};

[JSImplementation="LoadSaveSettingsListener"]
interface LoadSaveSettingsListenerImpl {
    void LoadSaveSettingsListenerImpl();
    void onLoad(IDLString data);
    boolean onSave(IDLString data, SaveReasonFlags reason);
};

interface Style {
};

interface EditorContext {
};

interface Config {
    void Config();
};

enum SaveReasonFlags {
// [-NAMESPACE]
    "SaveReasonFlags::None",
    "SaveReasonFlags::Navigation",
    "SaveReasonFlags::Position",
    "SaveReasonFlags::Size",
    "SaveReasonFlags::Selection",
    "SaveReasonFlags::AddNode",
    "SaveReasonFlags::RemoveNode",
    "SaveReasonFlags::User"
};

enum PinKind {
// [-NAMESPACE]
    "PinKind::Input",
    "PinKind::Output"
};

enum FlowDirection {
// [-NAMESPACE]
    "FlowDirection::Forward",
    "FlowDirection::Backward"
};

enum CanvasSizeMode {
// [-NAMESPACE]
    "CanvasSizeMode::FitVerticalView",
    "CanvasSizeMode::FitHorizontalView",
    "CanvasSizeMode::CenterOnly",
};

enum StyleColor {
    "StyleColor_Bg",
    "StyleColor_Grid",
    "StyleColor_NodeBg",
    "StyleColor_NodeBorder",
    "StyleColor_HovNodeBorder",
    "StyleColor_SelNodeBorder",
    "StyleColor_NodeSelRect",
    "StyleColor_NodeSelRectBorder",
    "StyleColor_HovLinkBorder",
    "StyleColor_SelLinkBorder",
    "StyleColor_HighlightLinkBorder",
    "StyleColor_LinkSelRect",
    "StyleColor_LinkSelRectBorder",
    "StyleColor_PinRect",
    "StyleColor_PinRectBorder",
    "StyleColor_Flow",
    "StyleColor_FlowMarker",
    "StyleColor_GroupBg",
    "StyleColor_GroupBorder",
    "StyleColor_Count"
};

enum StyleVar {
    "StyleVar_NodePadding",
    "StyleVar_NodeRounding",
    "StyleVar_NodeBorderWidth",
    "StyleVar_HoveredNodeBorderWidth",
    "StyleVar_SelectedNodeBorderWidth",
    "StyleVar_PinRounding",
    "StyleVar_PinBorderWidth",
    "StyleVar_LinkStrength",
    "StyleVar_SourceDirection",
    "StyleVar_TargetDirection",
    "StyleVar_ScrollDuration",
    "StyleVar_FlowMarkerDistance",
    "StyleVar_FlowSpeed",
    "StyleVar_FlowDuration",
    "StyleVar_PivotAlignment",
    "StyleVar_PivotSize",
    "StyleVar_PivotScale",
    "StyleVar_PinCorners",
    "StyleVar_PinRadius",
    "StyleVar_PinArrowSize",
    "StyleVar_PinArrowWidth",
    "StyleVar_GroupRounding",
    "StyleVar_GroupBorderWidth",
    "StyleVar_HighlightConnectedLinks",
    "StyleVar_SnapLinkToPinDir",
    "StyleVar_HoveredNodeBorderOffset",
    "StyleVar_SelectedNodeBorderOffset",
    "StyleVar_Count"
};