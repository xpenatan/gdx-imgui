
[NoDelete, Prefix="TextEditorWrapper::"]
interface TextEditor {
    void TextEditor();

    void SetReadOnlyEnabled(boolean aValue);
    [Const] boolean IsReadOnlyEnabled();
    void SetAutoIndentEnabled(boolean aValue);
    [Const] boolean IsAutoIndentEnabled();
    void SetShowWhitespacesEnabled(boolean aValue);
    [Const] boolean IsShowWhitespacesEnabled();
    void SetShowLineNumbersEnabled(boolean aValue);
    [Const] boolean IsShowLineNumbersEnabled();
    void SetShortTabsEnabled(boolean aValue);
    [Const] boolean IsShortTabsEnabled();
    [Const] long GetLineCount();
    void SetPalette(PaletteId aValue);
    [Const] PaletteId GetPalette();
    void SetLanguageDefinition(LanguageDefinitionId aValue);
    [Const] LanguageDefinitionId GetLanguageDefinition();
    [Const, Value] IDLString GetLanguageDefinitionName();
    void SetTabSize(long aValue);
    [Const] long GetTabSize();
    void SetLineSpacing(float aValue);
    [Const] float GetLineSpacing();

    static void SetDefaultPalette(PaletteId aValue);
    [Const] static PaletteId GetDefaultPalette();

    void SelectAll();
    void SelectLine(long aLine);
    void SelectRegion(long aStartLine, long aStartChar, long aEndLine, long aEndChar);
    void SelectNextOccurrenceOf([Const] DOMString aText, long aTextSize, optional boolean aCaseSensitive);
    void SelectAllOccurrencesOf([Const] DOMString aText, long aTextSize, optional boolean aCaseSensitive);
    [Const] boolean AnyCursorHasSelection();
    [Const] boolean AllCursorsHaveSelection();
    void ClearExtraCursors();
    void ClearSelections();
    void SetCursorPosition(long aLine, long aCharIndex);
    [Const] void GetCursorPosition(long[] outLine, long[] outColumn);

    long GetFirstVisibleLine();
    long GetLastVisibleLine();
    void SetViewAtLine(long aLine, SetViewAtLineMode aMode);

    void Copy();
    void Cut();
    void Paste();
    void Undo(optional long aSteps);
    void Redo(optional long aSteps);
    [Const] boolean CanUndo();
    [Const] boolean CanRedo();
    [Const] long GetUndoIndex();

    void SetText([Const] DOMString aText);
    [Const, Value] IDLString GetText();

//    void SetTextLines(const std::vector<std::string>& aLines) { ed.SetTextLines(aLines); }
//    [Const, Value] std::vector<std::string> GetTextLines() const { return ed.GetTextLines(); }

    void Render([Const] DOMString aTitle, optional boolean aParentIsFocused, [Const, Ref] optional ImVec2 aSize, optional boolean aBorder);
};

enum PaletteId {
    "PaletteId::Dark",
    "PaletteId::Light",
    "PaletteId::Mariana",
    "PaletteId::RetroBlue"
};

enum LanguageDefinitionId {
    "LanguageDefinitionId::None",
    "LanguageDefinitionId::Cpp",
    "LanguageDefinitionId::C",
    "LanguageDefinitionId::Cs",
    "LanguageDefinitionId::Python",
    "LanguageDefinitionId::Lua",
    "LanguageDefinitionId::Json",
    "LanguageDefinitionId::Sql",
    "LanguageDefinitionId::AngelScript",
    "LanguageDefinitionId::Glsl",
    "LanguageDefinitionId::Hlsl"
};

enum SetViewAtLineMode {
    "SetViewAtLineMode::FirstVisibleLine",
    "SetViewAtLineMode::Centered",
    "SetViewAtLineMode::LastVisibleLine"
};